======================================================================
    TextMIDITools/test -- Test files for MIDI file converters.

                    Thomas E. Janzen
                    <janzentome@gmail.com>

======================================================================
What is this?
======================================================================

General Information

TextMIDITools/test is a test script and 7 lists of MIDI files from the
classical archive (https://www.classicalarchives.com).  These MIDI
files are not provided here but seem to still be available from
classicalarchives.com.

The converters are:
textmidi - convert a text representation of a MIDI file into a binary
           standard MIDI file.
miditext - convert a binary standard MIDI file into a text representation.

The smustextmidi program is not tested by textmidiroundtriptest.py.

Run as follows:

./textmidiroundtriptest.py classical_archives0.txt [all 358 match]
./textmidiroundtriptest.py classical_archives1.txt [all 370 match]
./textmidiroundtriptest.py classical_archives2.txt [all 359 match]
./textmidiroundtriptest.py classical_archives3.txt [all 362 match]
./textmidiroundtriptest.py classical_archives4.txt [all 344 match]
./textmidiroundtriptest.py classical_archives5.txt [all 370 match]
./textmidiroundtriptest.py classical_archives6.txt [all 384 match]
./textmidiroundtriptest.py classical_archives_never0.txt [all 366 match]
./textmidiroundtriptest.py classical_archives_never1.txt [all 366 match]
./textmidiroundtriptest.py classical_archives_never2.txt [all 366 match]
./textmidiroundtriptest.py classical_archives_never3.txt [all 366 match]
./textmidiroundtriptest.py classical_archives_never4.txt [all 366 match]
./textmidiroundtriptest.py classical_archives_never5.txt [all 366 match]
./textmidiroundtriptest.py classical_archives_never6.txt [all 363 match]



./textmidiroundtriptest.py classical_archives_otherfails.txt [only all 55 MIDI file compares fail]

[bash shell syntax for redirection of logerr].

For tests of miditext --lazy, rigid files are used.
"Rigid" MIDI files are files that have rhythms that line up to 
ordinary musical values and should render well as "LAZY" mode textmidi files.
The following files all compare file pairs exactly and pass with miditext --lazy:
./textmidiroundtriptest.py classical_archives_rigid0.txt lazy
./textmidiroundtriptest.py classical_archives_rigid1.txt lazy
./textmidiroundtriptest.py classical_archives_rigid2.txt lazy
./textmidiroundtriptest.py classical_archives_rigid3.txt lazy

The following rigid files have failures in lazy mode:
./textmidiroundtriptest.py rigidretest.txt lazy verbose > rigidretestlog.txt 2>&1  [All 3 files compare exactly.]
./textmidiroundtriptest.py rigidretest_mididiffer.txt lazy verbose  [8 files: 7 just fail MIDI file comparison; 1 fails both text and MIDI file comparison.]
./textmidiroundtriptest.py rigidretest_txtdiffer.txt lazy verbose [38 files: All 38 fail MIDI file comparison; 15 textmidi file pairs fail comparisons]

The miditext option "--lazy" is not fully implemented, but does well for many simple cases.
One problem is if a MIDI has non-note events during playing (i.e., not between notes),
there is no way to represent that in LAZY mode because LAZY mode display full note events from
start to stop (similarly to SMUS files); there is no "inside the note".
At a later time this might be addressed by permitting the discarding of non-note events.

Those that do not match with detailed (non-lazy) conversion are often
MIDI files that violate the MIDI SMF specification and will
probably not be investigated further.  A small sample were found to 
inconsistently apply MIDI "running status".

Power set tests are meant to nearly completely cover all combinations of
a set of MIDI features.  The script textmidiroundtriptest.py runs on these
files as well.  The text files compare the same in all cases:

powersettests0.txt [0/87 midi files differ] 
powersettests1.txt [12/101 midi files differ]
powersettests2.txt [2/87 midi files differ]
powersettests3.txt [11/100 midi files differ]
powersettests4.txt [16/103 midi files differ]
powersettests5.txt [10/97 midi files differ]

There are MIDI files that never apply running status, but if
textmidi --runningstatus never is used to convert them back from text to
MIDI, they compare exactly:

classical_archives_never0.txt
classical_archives_never1.txt
classical_archives_never2.txt
classical_archives_never3.txt
classical_archives_never4.txt
classical_archives_never5.txt
classical_archives_never6.txt

======================================================================
Features
======================================================================

* textmidiroundtriptest.py
  + Uses the textmidi utility to convert an original MIDI file to a
  textmidi file, then
  + Uses the miditext utility to convert the resulting textmidi file
  back into a Standard MIDI File, then
  + Uses the textmidi utility to convert the second MIDI file to
  a second textmidi file, then
  + compares the original and converted MIDI file, then
  + compares the first and second textmidi files.
  + Reports the total number of input files, and the percentages
  of identical pairs of MIDI and textmidi files.
  + As it operates on each file, reports if one of the comparisons
  fails and gives the name of the failing files.
  + Since some, especially older, MIDI files violate the
  way that MIDI running status is to be used, the textmidi program
  and the textmidiroundtriptest.py script support the writing of
  MIDI files that misuse running status in the same way, so that
  files can be made to match, showing that there are no other
  differences.   The different running status policies are:
      1. standard; textmidi's interpretation of the spec
         The file list should read either:
         classical_archives/bach/BachAnnaMagdalenaNotebook/6/3men.mid
         or
         classical_archives/bach/BachAnnaMagdalenaNotebook/6/3men.mid,standard
      2. never; also put out the status byte (the command+channel).
         Hence the file list line should read:
           classical_archives/bach/BachAnnaMagdalenaNotebook/0/anna-18.mid,never
      3. persistentaftermeta; MIDI META events do not reset running status
         The file list line should read:
         classical_archives/bach/Bach_BWV1000-1013/4/chacona.mid,persistentaftermeta
      4. persistentaftersysex; MIDI SYSEX events do not reset running status
      5. persistentaftersysexormeta; neither SYSEX or META events reset running status
  The MIDI files used were downloaded or purchased by about 2005; it possible that
  some of them were later repaired, replaced, or deleted.

======================================================================
Where to get a copy
======================================================================

The latest release of TextMIDITools are available at:
github.

======================================================================
How to install
======================================================================

The test files are not installed in a system area but may be run
from the path to which the package was de-archived.

textmidiroundtriptest.py is written to work on linux and uses the diff utility.


