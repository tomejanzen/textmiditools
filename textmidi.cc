#line 2 "textmidi.cc"

#line 4 "textmidi.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 50
#define YY_END_OF_BUFFER 51
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[712] =
    {   0,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   51,   49,   47,   48,   49,   46,   49,   49,
       49,   47,   48,   47,   49,   43,   49,   49,   49,   49,
       49,   49,   49,   49,   34,   49,   49,   49,   49,   12,
       46,   49,   48,   47,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,    6,   12,   49,   47,    9,    8,   46,   10,   10,
       10,   11,   10,   47,    0,   46,    0,    0,    0,   47,
        0,   43,    0,    0,    0,   43,    0,    0,   45,    0,
        0,    0,    0,   37,    0,    0,    0,    0,   34,    0,

        0,   37,   34,   34,   34,   34,    0,   44,    0,    0,
       46,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    9,
       47,   46,   10,   10,   10,    0,    0,    3,    0,    0,
        0,    0,    0,   43,    0,   43,    0,    0,    0,    0,
       42,    0,    0,   37,    0,    0,    0,    0,   34,    0,
       34,   44,    0,    0,    0,    0,    0,    0,    0,   39,
        0,    0,   39,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   38,    0,    0,   38,    0,    0,    0,   38,
        0,    0,   38,   42,    0,    0,    0,   41,    0,    0,
       41,    0,    0,    0,   34,    0,   34,   44,    0,   44,
        0,    0,    0,   35,    0,    0,   40,    0,    0,   40,
        0,    0,    0,   40,    0,    0,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   38,    0,   38,    0,   42,    0,
       42,   41,    0,    0,    0,   36,    0,    0,    0,    0,
       34,   33,    0,    0,    0,    0,    0,    4,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    7,    0,    0,
        0,    0,    0,    5,    0,    0,    0,   33,   33,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,   22,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   31,   31,
        0,    0,    0,    0,    0,    0,    5,    0,    0,    0,
        0,    0,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    5,    0,    0,    0,   20,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,    0,    0,
        0,    0,   23,    0,    0,   19,    0,    0,    0,    0,
       31,    0,    0,    1,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   18,    0,    0,    0,    0,   30,
        0,    0,    0,    0,   22,    0,    0,    0,   23,    0,
        0,    0,    0,    6,   32,   32,    0,    1,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   12,    0,

        0,    0,   18,    0,    0,    0,    0,   16,    0,   16,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   21,   32,    0,    2,    0,    0,    0,    0,
        0,    0,   29,    0,    0,    0,    0,   25,    0,    0,
        0,   21,    0,    0,    2,    0,    0,   27,    0,   15,
       25,    0,    0,    0,    0,    0,   27,   27,    0,    0,
        0,    0,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,   24,    0,    0,    0,    0,    0,    0,
       26,   24,    0,    0,    0,    0,   26,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   17,    0,   17,   28,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    7,    8,    9,   10,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,    1,   41,   42,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,    1,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,    1,   70,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    6,    1,    1,
        7,    7,    1,    1,    8,    8,    8,    8,    8,    8,
        9,    1,    1,   10,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       11,    1,    1,    8,    8,    8,    8,    8,    8,    9,
        1,    1,   10,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[731] =
    {   0,
        0,    2,   21,   28,   51, 1431,  121, 1400,    8,   14,
       39,  190, 1344, 2341,    6, 2341,  172,   12,   14,   36,
     1261,  194, 1174,  196,  175,  198,    3,  209,  274,  193,
      200,  210,  223,  216,  242,  231,  217,  236,  254, 1067,
      286, 1062, 1040,  261,  246,  250,  301,  316,  378,  440,
      325,  387,  225,  323,  307,  364,  232,  373,  324,  432,
      390, 1029,  958,  982,  301, 2341, 2341,  313,    0,   43,
        0, 2341,  316,  342,  331,  352,  366,  455,  349,  979,
      352,  469,  493,  428,  502,  969,  463,  962, 2341,  566,
      500,  435,  399,  943,  515,  382,  387,  436,  513,  431,

      407,  485,  484,  514, 2341,  534,  523,  534,  469,  475,
        0,  479,  559,  543,  623,  565,  416,  931,  583,  503,
      570,  521,  551,  518,  524,  547,  570,  566,  591,  612,
      562,  566,  575,  577,  603,  597,  604,  599,  620,  605,
      604,  617,  632,  633,  617,  629,  637,  638,  899, 2341,
      683,  694,    0,  356,  373,  639,  645,  677,  683,  694,
      692,  700,  705, 2341,  703,  711,  859,  721,  732,  740,
      744,  757,  764, 2341,  769,  691,  713,  776,  776,  697,
      777,  807,  780,  710,  793,  802,  809,  800,  734, 2341,
      816,  767,  778,  826,  837,  842,  803,  759,  778,  795,

      800,  798,  766,  812,  829,  724,  819,  718,  817,  833,
      833,  835,  841,  888,  847,  828,  836,  851,  855,  842,
      843,  844,  847,  860,  851,  849,  864,  871,  869,  895,
      902,  904,  741,  911,  913,  918,  920,  930,  932,  553,
      937,  943,  949,  732,  956,  958,  925,  711,  963,  947,
      965,  978,  895,  967,  719,  915,  792, 2341,  976,  982,
      940,  994,  986,  992,  999, 1002, 2341, 1007, 1005, 1014,
     1019, 1025, 1029,  706, 1031, 1042, 1045,  981,  988,  989,
     1009, 1008, 1013, 1015, 1021, 1036, 1021, 1032, 1030, 1030,
     2341, 1046, 1046,  651,  554, 1066, 1055, 1093, 1047,  515,

     1056, 1049, 1049, 1064, 1056, 1067, 1054, 1056, 1068,  550,
      505, 1073, 1083, 1079, 2341, 1109,  538, 1126, 2341, 1116,
     1121, 2341, 1132, 1143, 1145, 1147, 1081, 1088, 1108, 1121,
     1154,  514, 1153, 1160, 1113, 1122, 1144, 2341, 1148, 1141,
     1150, 1146, 1145, 1175, 1144, 1157,  480, 1151, 1168, 1156,
     1177, 1179,    0, 1173, 1174, 1171,  433, 1175, 1174, 1186,
     1189,  429, 1187, 1181, 1177, 1210, 1232,  466, 1184,  462,
     1202, 1191, 1194, 2341, 1197, 1185,  379,    0,  405, 1206,
     1193, 1249, 1211, 1217, 1229, 1229, 1256, 1272, 1220, 1261,
     1233, 1242,  382, 1244, 1241, 1255, 1265, 1258, 1266, 1266,

     1253, 1271, 1272, 1267, 1269, 1268, 1279, 1265, 1269, 1301,
     1286, 1325, 1294, 1296, 1286, 1292, 1289, 1288, 1305, 1294,
     1301, 1303, 1313, 1343, 1330, 1354,  326, 1365, 1321, 1325,
     1338, 1331, 1344, 1337, 1350,  364, 1341, 1342, 1356, 1357,
     1342, 1355, 1383, 1358, 1364, 1375, 1359, 1378, 1394, 1412,
     1362, 1379, 1382, 1377, 1392, 1396, 2341, 1386,  307, 1400,
     1426, 1336, 1446, 1391, 1453, 1414, 1460, 1407, 1408, 1423,
     1436, 1426, 1423, 1475, 1482, 1444, 2341, 1434, 1454,  271,
     1441, 1489, 1424, 1502, 1509, 1456, 1453, 1461, 1481,    0,
      303, 1472, 1475, 1478, 1490, 2341, 1497, 1488,  258, 1431,

     1488, 1528, 1513, 1547,  290,  278, 1498, 1499, 1506, 1535,
     1561, 1531, 1554, 1559, 1572, 1519, 2341, 1538, 1535, 1540,
     1579, 1564, 1590, 1597, 1577, 1583, 1545, 1608, 1615, 1558,
      247, 1613, 1585,  224, 1589, 1593, 1582, 1601, 1602, 1600,
     1611, 1632, 1644, 1620, 1652,  221, 1602, 1618, 1637, 1650,
     1665, 1663, 1672, 1667, 2341, 1628, 1639, 1684, 1661, 1662,
     1695, 1676, 1700, 2341, 1702, 1713, 1660,  217, 1677, 1668,
     1690, 1685, 1696, 1697, 1687, 1724, 1729, 1741, 1690, 1706,
     1743, 1747, 1759, 1761, 1751, 1772, 1774, 1781, 1789, 1718,
     1742, 1774, 1761,    0, 1760, 1772, 1764, 1782, 2341, 1801,

     1785, 1776, 1803, 1797, 1818, 1830, 1810, 1832, 1838, 1845,
     1847, 1849,  211, 1854, 1852, 1865, 1867, 1860, 1878, 1807,
     1880, 1832, 2341,  202, 1823, 2341, 1855, 1861, 1894, 1853,
      198, 1886, 1882, 1907, 1896, 1915, 1899, 1922, 1880, 1920,
     1924, 2341, 1901, 1898, 2341, 1898,   35, 1934, 1931, 1933,
     1935, 1904, 1940, 1951, 1923, 1929, 2341, 1939, 1925, 1953,
     1970, 1949, 1981, 1949, 1993, 2341, 1954, 1963, 2001, 1979,
     2008, 2341, 2015, 2013, 2026, 2033, 2018, 2040, 2047, 2045,
     2058, 2065, 2050, 2072, 2079, 2077, 2084, 2081, 2092, 2090,
     2103, 2095, 2108, 2113, 2122, 2127, 2101, 2115, 2105, 2140,

     2133, 2124, 2151, 2143, 2158, 2156, 2160, 2165, 2178, 2163,
     2341, 2190, 2201, 2212, 2222, 2225, 2236, 2240, 2251, 2262,
     2268, 2277, 2280, 2290, 2295, 2302, 2311, 2315, 2322, 2330
    } ;

static const flex_int16_t yy_def[731] =
    {   0,
      712,  712,  712,  712,  711,    5,  711,    7,  713,  713,
      714,  714,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  715,  711,  711,  716,  711,  717,  711,  711,   29,
       29,   29,  711,  711,  711,  711,  711,  711,  716,  711,
      715,  711,  711,  711,  718,  717,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  719,  719,  711,  711,  719,  720,  720,
      720,  711,  720,  711,  711,  711,  711,  711,  721,   41,
       39,  711,  711,  711,  711,  711,  711,  717,  711,  717,
      722,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
       41,  723,  711,  711,  717,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  719,  711,
      719,  719,  720,  720,  720,  711,  711,  711,  721,  711,
      711,  711,  711,  711,  711,  711,   90,  717,  717,  722,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  717,  717,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  717,  717,  717,
      717,  717,  717,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  717,  717,  717,  717,  717,  717,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  717,  717,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  724,  711,  717,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      298,  711,  298,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  724,  724,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  725,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  726,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      725,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      726,  711,  711,  727,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  728,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  728,  711,  711,  711,  711,  711,  711,
      729,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  729,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  730,  711,  711,  711,
      711,  711,  730,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
        0,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711
    } ;

static const flex_int16_t yy_nxt[2412] =
    {   0,
      711,   15,   16,   18,   16,   89,   15,   74,   15,   65,
       66,   67,   74,   76,   65,   68,   66,   67,   74,   17,
       65,   17,   15,   16,   77,   77,   19,   15,   19,   18,
       16,   20,   20,   19,   15,   19,  647,   78,   20,   20,
       70,   71,   72,   90,  154,   70,   77,   77,   17,  154,
       17,   21,   22,   23,   21,   21,   21,   24,   25,   21,
       21,   26,   26,   21,   27,   28,   28,   29,   30,   31,
       32,   28,   21,   21,   33,   21,   34,   21,   21,   35,
       21,   36,   21,   37,   21,   38,   21,   21,   21,   21,
       14,   21,   39,   21,   28,   28,   29,   30,   31,   32,

       28,   21,   21,   33,   21,   34,   21,   21,   35,   21,
       36,   21,   37,   21,   38,   21,   21,   21,   21,   21,
       40,   42,   15,   43,   42,   42,   42,   44,   45,   42,
       42,   42,   42,   42,   46,   47,   48,   49,   50,   51,
       52,   52,   42,   53,   54,   55,   56,   57,   42,   58,
       42,   59,   60,   61,   42,   42,   42,   42,   42,   42,
       14,   42,   42,   42,   47,   48,   49,   50,   51,   52,
       52,   42,   53,   54,   55,   56,   57,   42,   58,   42,
       59,   60,   61,   42,   42,   42,   42,   42,   42,   62,
       63,   73,   71,   72,   75,   80,   70,   74,   84,  647,

       74,   81,   74,  532,   82,   82,   86,   87,   82,   82,
       91,   97,  634,   92,  711,   79,   93,   84,  568,   94,
       94,  711,  368,   75,   95,  568,   98,   84,  101,   99,
      101,  711,  107,  102,  102,  103,   79,  100,   79,  109,
       97,  108,  108,  711,  104,   92,   84,  105,  410,  105,
      711,  128,   89,   95,  110,   98,   79,   79,   99,  136,
      711,   81,   74,   79,  103,  112,  100,   74,  109,  114,
      106,   79,  112,  104,   92,   91,   79,   84,   92,  368,
      128,   93,   79,  110,   94,   94,  112,  111,  136,   95,
      115,  368,   74,   81,   79,   96,   82,   82,  114,  106,

      540,  112,  151,  150,  532,  116,   84,  151,  117,   84,
       92,  118,  118,  519,  152,  150,  119,  155,   95,  151,
      116,  132,  154,  117,   96,  120,  118,  118,  129,  116,
      129,  119,  117,  130,  130,  118,  118,  116,   84,   92,
      119,  131,  141,   74,  133,  119,  121,  112,   74,  498,
      132,  127,  116,   76,  120,  156,  159,  154,   74,  711,
      119,  116,  154,  112,  112,  475,  116,   78,  464,  119,
      131,  141,  161,  133,  155,  121,   77,   77,  134,  154,
      127,  116,  116,  368,  156,  117,  135,  137,  118,  118,
      116,  116,  711,  119,  117,  138,  176,  118,  118,  122,

      139,  161,  119,  140,  112,  123,  379,  134,  146,   94,
       94,  124,  147,  112,  116,  135,  137,  102,  102,  177,
      148,  421,  119,  116,  138,  176,  118,  118,  122,  139,
      112,  119,  140,  101,  123,  101,   91,  146,  102,  102,
      124,  147,   93,  116,  116,   94,   94,  117,  177,  148,
      118,  118,  116,  178,  125,  119,   78,  142,  126,  143,
      157,  180,  157,  368,  144,  158,  158,  368,  165,  145,
      165,  406,  112,  166,  166,  401,  116,   86,   87,   82,
       82,  368,  178,  125,  119,  184,  142,  126,  143,  105,
      180,  105,  174,  144,   91,  102,  102,   92,  145,  185,

       93,   91,  187,   94,   94,  116,  162,  170,   95,   93,
      171,  171,   94,   94,  184,  379,   91,  163,  105,  105,
      105,  105,   93,  173,  107,   94,   94,  197,  185,   92,
      175,  187,  179,  108,  108,  200,  203,   95,  162,  105,
       89,  105,  182,  183,  108,  108,  163,  369,  192,  204,
      192,  368,  173,  193,  193,   89,  197,  358,   92,  175,
      317,  179,  181,  188,  200,  203,  189,  162,   89,  190,
      190,  205,  117,  167,  191,  118,  118,  201,  204,  202,
      168,  168,  168,  168,  168,  168,  168,  206,  198,  169,
      117,  181,  199,  118,  118,  188,  350,  207,  196,  208,

      205,  130,  130,  191,  209,  210,  201,  211,  202,  168,
      168,  168,  168,  168,  168,  168,  206,  198,  169,  190,
      212,  199,  130,  130,  188,   89,  207,  196,  208,  213,
      214,  215,  218,  209,  210,  219,  211,  194,  194,  194,
      194,  194,  194,  194,  216,  220,  195,  223,  224,  212,
      217,  221,  228,  184,  225,  158,  158,  229,  213,  214,
      215,  218,  227,  222,  219,  226,  194,  194,  194,  194,
      194,  194,  194,  216,  220,  195,  223,  224,  230,  217,
      221,  228,  184,  225,  151,  150,  229,  158,  158,  151,
      711,  227,  222,  349,  226,  152,  150,  235,  231,  235,

      151,  232,  236,  236,  233,  233,  161,   93,   89,  234,
       94,   94,   93,  166,  166,   94,   94,  252,  322,   86,
      237,  166,  166,   89,  105,  238,  105,  253,  239,  256,
      231,  240,  240,  261,   89,  161,  241,  242,  234,  242,
      319,  711,  243,  243,  190,  190,  252,  711,  315,  237,
      711,  711,  244,  245,  171,  171,  253,  238,  256,  231,
      290,  246,  261,  173,  247,  241,  288,  248,  248,  250,
       91,  250,  249,  280,  251,  251,   93,  193,  193,   94,
       94,  105,  105,  105,  105,  259,  238,  259,  193,  193,
      260,  260,  173,  246,  262,  255,  281,  105,  263,  105,

      263,  249,  280,  264,  264,  257,  265,  189,  285,  266,
      190,  190,  267,  267,  269,  258,  269,  268,  254,  270,
      270,  282,  246,  189,  255,  281,  190,  190,   89,  278,
      272,  271,  283,  273,  257,  284,  274,  274,  265,   89,
      286,  275,  276,  287,  276,  279,  268,  277,  277,  117,
      282,  289,  118,  118,  291,  292,  293,  294,  278,  295,
      271,  283,  272,  299,  284,  300,   88,  265,  301,  286,
      275,  302,  287,  303,  304,  305,  306,  307,  308,  309,
      289,  310,  311,  291,  292,  293,  294,  312,  295,  296,
      313,  272,  299,  297,  300,  297,  230,  301,  298,  298,

      302,  150,  303,  304,  305,  306,  307,  308,  309,  232,
      310,  311,  233,  233,  233,  233,  312,  327,  232,  313,
      314,  233,  233,  236,  236,  315,  316,   93,  236,  236,
       94,   94,   89,  331,   89,  248,  248,  239,  190,   89,
      240,  240,  240,  240,  239,   89,  327,  240,  240,  314,
      174,   89,  318,  243,  243,  316,  317,  251,  251,  243,
      243,  320,  331,  320,   89,  247,  321,  321,  248,  248,
      247,  332,  322,  248,  248,  251,  251,  164,  323,  324,
       80,  318,  328,  325,  150,  325,  260,  260,  326,  326,
      182,  329,  260,  260,  330,  262,  264,  264,  112,  263,

      332,  263,  264,  264,  264,  264,  266,  323,  335,  267,
      267,  328,  267,  267,  266,  270,  270,  267,  267,  336,
      329,  337,  333,  330,  270,  270,  189,   89,  338,  190,
      190,   89,  273,   89,  339,  274,  274,  335,  273,  274,
      274,  274,  274,  340,   89,  341,  334,   89,  336,  342,
      337,  333,  277,  277,  343,  277,  277,  338,  344,  330,
      345,  346,  347,  339,  348,  298,  298,  296,  357,  112,
      359,  297,  340,  297,  341,  334,  298,  298,  342,  360,
      112,  361,  362,  343,  363,  364,  365,  344,  330,  345,
      346,  347,  366,  348,  351,  367,  370,  357,  352,  359,

      352,  371,  112,  353,  353,  374,  372,   79,  360,  354,
      361,  362,  373,  363,  364,  365,  232,  355,  375,  233,
      233,  366,  376,  356,  367,  370,  321,  321,   89,  244,
      371,  321,  321,  239,  374,  372,  240,  240,  354,  247,
      377,  373,  248,  248,  324,  380,  355,  375,  325,  381,
      325,  376,  356,  326,  326,  326,  326,  326,  326,  105,
      266,  105,   89,  267,  267,  382,  383,  273,  384,  377,
      274,  274,  385,  386,  380,  387,  388,  391,  381,  392,
      389,  393,  389,  396,  394,  390,  390,  397,  397,  397,
      397,  398,  399,  400,  382,  383,  395,  384,  402,  403,

      404,  385,  386,  405,  387,  407,  391,  408,  392,  409,
      393,  410,  396,  394,   79,  415,  416,  417,  418,  419,
      398,  399,  400,  420,  422,  395,  423,  402,  403,  404,
      390,  390,  405,  412,  407,  427,  408,  413,  409,  413,
      411,  428,  414,  414,  415,  416,  417,  418,  419,  429,
      424,  430,  420,  422,  425,  423,  425,  424,  431,  426,
      426,  425,  432,  425,  427,  433,  426,  426,  434,  411,
      428,  390,  390,  388,  435,  397,  397,  389,  429,  389,
      430,  436,  390,  390,  437,  438,  439,  431,  440,  441,
      442,  432,  443,  444,  433,  445,  446,  434,  447,  448,

      451,   79,  410,  435,  414,  414,  414,  414,  452,  453,
      436,  449,  450,  437,  438,  439,  454,  440,  441,  442,
      455,  443,  444,  456,  445,  446,  412,  447,  448,  451,
      413,  457,  413,  458,  459,  414,  414,  452,  453,  460,
      426,  426,  468,  711,  424,  454,  500,  500,  425,  455,
      425,  469,  456,  426,  426,  461,  470,  471,  472,  462,
      457,  462,  458,  459,  463,  463,  465,  473,  460,  474,
      466,  468,  466,  476,  477,  467,  467,  478,  479,  480,
      469,  481,  485,  486,  482,  470,  471,  472,  483,  487,
      483,  488,  489,  484,  484,  410,  473,  491,  474,  492,

      493,   18,  476,  477,  450,  450,  478,  479,  480,  494,
      481,  485,  486,  410,  495,  496,  497,  499,  487,  501,
      488,  489,  450,  450,  467,  467,  491,  461,  492,  493,
      490,  462,   41,  462,  484,  484,  500,  500,  494,  505,
      506,  500,  500,  495,  496,  497,  499,  461,  501,  507,
      508,  462,  509,  462,  465,  510,  463,  463,  466,  490,
      466,  502,  516,  467,  467,  503,  517,  503,  505,  506,
      504,  504,  518,  520,  711,  527,  511,  528,  507,  508,
      512,  509,  512,  475,  510,  513,  513,  514,  529,  514,
      482,  516,  515,  515,  483,  517,  483,  530,  533,  484,

      484,  518,  520,  521,  527,  534,  528,  522,  535,  522,
      524,  538,  523,  523,  525,  539,  525,  529,  541,  526,
      526,  536,  537,  542,  542,  711,  530,  533,  711,  502,
      546,  547,  548,  503,  534,  503,  549,  535,  542,  542,
      538,  513,  513,  711,  539,  550,  550,  541,  543,  555,
      536,  537,  544,  711,  544,  551,  556,  545,  545,  546,
      547,  548,  511,  557,  513,  513,  512,  558,  512,  515,
      515,  513,  513,  554,  559,  559,  560,  553,  555,  711,
      521,  564,  515,  515,  522,  556,  522,  526,  526,  559,
      559,  521,  557,  526,  526,  522,  558,  522,  524,  567,

      523,  523,  525,  569,  525,  560,  553,  526,  526,  424,
      564,  570,  571,  425,  532,  425,  561,  572,  426,  426,
      562,  573,  562,  565,  566,  563,  563,  574,  567,  575,
      578,  578,  569,  576,  711,  579,  580,  577,  549,  577,
      570,  571,  578,  578,  711,  543,  572,  550,  550,  544,
      573,  544,  589,  543,  578,  578,  574,  544,  575,  544,
      550,  550,  545,  545,  579,  580,  551,  581,  554,  590,
      582,  559,  559,  583,  583,  711,  711,  585,  584,  585,
      591,  589,  586,  586,  711,  561,  563,  563,  553,  562,
      588,  562,  595,  596,  563,  563,  561,  597,  590,  581,

      562,  592,  562,  532,  598,  563,  563,  584,  599,  591,
      563,  563,  566,  566,  532,  600,  601,  553,  602,  588,
      604,  595,  596,  566,  566,  576,  597,  593,  581,  577,
      605,  577,  711,  598,  603,  603,  620,  599,  594,  603,
      603,  711,  576,  711,  600,  601,  577,  602,  577,  604,
      582,  578,  578,  583,  583,  711,  593,  583,  583,  605,
      606,  586,  586,  711,  607,  620,  607,  594,  582,  608,
      608,  583,  583,  606,  621,  592,  609,  607,  611,  607,
      622,  612,  610,  610,  613,  613,  615,  623,  615,  614,
      617,  616,  616,  625,  618,  626,  618,  627,  628,  619,

      619,  593,  524,  621,  629,  609,  525,  630,  525,  622,
      611,  526,  526,  603,  603,  631,  623,  711,  614,  632,
      608,  608,  625,  711,  626,  711,  627,  628,  633,  633,
      593,  606,  711,  629,  711,  607,  630,  607,  639,  611,
      608,  608,  608,  608,  631,  582,  606,  711,  583,  583,
      607,  642,  607,  643,  612,  610,  610,  613,  613,  613,
      613,  612,  616,  616,  613,  613,  634,  639,  617,  635,
      619,  619,  618,  644,  618,  616,  616,  619,  619,  636,
      642,  640,  643,  637,  645,  637,  646,  632,  638,  638,
      641,  641,  633,  633,  711,  524,  633,  633,  635,  525,

      711,  525,  644,  612,  526,  526,  613,  613,  634,  651,
      651,  652,  649,  645,  649,  646,  636,  650,  650,  654,
      637,  640,  637,  636,  655,  651,  651,  637,  656,  637,
      641,  641,  638,  638,  641,  641,  653,  659,  657,  664,
      652,  650,  650,  650,  650,  651,  651,  665,  654,  658,
      660,  660,  661,  655,  666,  667,  662,  656,  662,  663,
      663,  663,  663,  660,  660,  668,  659,  672,  664,  711,
      657,  661,  676,  677,  677,  662,  665,  662,  658,  711,
      663,  663,  669,  666,  667,  711,  670,  711,  670,  678,
      678,  671,  671,  711,  673,  711,  672,  711,  674,  657,

      674,  676,  669,  675,  675,  711,  670,  711,  670,  679,
      711,  678,  678,  680,  711,  680,  673,  711,  681,  681,
      674,  711,  674,  675,  675,  675,  675,  682,  677,  677,
      688,  683,  711,  683,  685,  711,  684,  684,  686,  711,
      686,  689,  711,  687,  687,  690,  711,  690,  679,  711,
      691,  691,  680,  711,  680,  691,  691,  691,  691,  679,
      692,  692,  711,  680,  711,  680,  682,  711,  681,  681,
      683,  711,  683,  682,  711,  692,  692,  683,  711,  683,
      685,  711,  684,  684,  686,  693,  686,  687,  687,  687,
      687,  696,  696,  689,  687,  687,  711,  690,  711,  690,

      697,  697,  697,  697,  689,  692,  692,  695,  690,  693,
      690,  697,  697,  691,  691,  700,  700,  698,  711,  711,
      699,  711,  699,  700,  700,  700,  700,  702,  701,  702,
      711,  695,  703,  703,  703,  703,  695,  696,  696,  704,
      699,  705,  711,  700,  700,  706,  711,  706,  708,  698,
      707,  707,  705,  710,  710,  711,  706,  701,  706,  705,
      695,  709,  709,  706,  711,  706,  707,  707,  707,  707,
      707,  707,  699,  710,  710,  700,  700,  708,  698,  705,
      711,  711,  711,  706,  711,  706,  711,  711,  709,  709,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   83,  711,  711,   83,   83,   83,   83,
       83,   83,   85,   85,   85,   85,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  113,  113,  113,
      113,  149,  149,  149,  711,  149,  149,  149,  149,  149,
      149,  149,  153,  153,  153,  711,  153,  153,  153,  153,
      153,  153,  153,  160,  711,  160,  160,  160,  172,  711,
      711,  711,  172,  172,  172,  172,  172,  186,  186,  186,
      378,  378,  711,  378,  378,  378,  378,  378,  378,  378,

      378,  531,  531,  552,  711,  711,  711,  711,  552,  552,
      552,  552,  587,  711,  711,  711,  711,  711,  587,  587,
      587,  624,  624,  648,  711,  711,  711,  711,  711,  648,
      648,  694,  711,  711,  711,  711,  694,  694,  694,  694,
       13,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711
    } ;

static const flex_int16_t yy_chk[2412] =
    {   0,
        0,    1,    1,    2,    2,   27,    1,   15,    2,    9,
        9,    9,   15,   18,    9,   10,   10,   10,   18,    1,
       10,    2,    3,    3,   19,   19,    3,    3,    3,    4,
        4,    3,    3,    4,    4,    4,  647,   20,    4,    4,
       11,   11,   11,   27,   70,   11,   20,   20,    1,   70,
        2,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,   12,   12,   12,   17,   22,   12,   24,   25,  631,

       22,   22,   24,  624,   22,   22,   26,   26,   26,   26,
       28,   30,  613,   28,   30,   25,   28,   22,  568,   28,
       28,   31,  546,   17,   28,  534,   31,   25,   33,   32,
       33,   32,   36,   33,   33,   34,   24,   32,   26,   37,
       30,   36,   36,   30,   34,   28,   22,   35,  531,   35,
       31,   53,   46,   28,   38,   31,   34,   37,   32,   57,
       32,   39,   44,   33,   34,   53,   32,   44,   37,   45,
       35,   36,   57,   34,   28,   29,   38,   39,   29,  506,
       53,   29,   35,   38,   29,   29,   45,   41,   57,   29,
       46,  505,   41,   41,   39,   29,   41,   41,   45,   35,

      499,   44,   65,   65,  491,   47,   39,   65,   47,   41,
       29,   47,   47,  480,   68,   68,   47,   73,   29,   68,
       48,   55,   73,   48,   29,   47,   48,   48,   54,   51,
       54,   48,   51,   54,   54,   51,   51,   47,   41,   29,
       51,   54,   59,   74,   55,   47,   48,   55,   74,  459,
       55,   51,   48,   76,   47,   75,   79,  154,   76,   81,
       48,   51,  154,   54,   59,  436,   47,   77,  427,   51,
       54,   59,   79,   55,  155,   48,   77,   77,   56,  155,
       51,   48,   49,  393,   75,   49,   56,   58,   49,   49,
       51,   52,   81,   49,   52,   58,   96,   52,   52,   49,

       58,   79,   52,   58,   56,   49,  379,   56,   61,   93,
       93,   49,   61,   58,   49,   56,   58,  101,  101,   97,
       61,  377,   49,   52,   58,   96,  117,  117,   49,   58,
       61,   52,   58,   84,   49,   84,   92,   61,   84,   84,
       49,   61,   92,   49,   50,   92,   92,   50,   97,   61,
       50,   50,   52,   98,   50,   50,   78,   60,   50,   60,
       78,  100,   78,  370,   60,   78,   78,  368,   87,   60,
       87,  362,   60,   87,   87,  357,   50,   82,   82,   82,
       82,  347,   98,   50,   50,  109,   60,   50,   60,  103,
      100,  103,  102,   60,   83,  102,  102,   83,   60,  110,

       83,   91,  112,   83,   83,   50,   85,   91,   83,   85,
       91,   91,   85,   85,  109,  332,   95,   85,   99,  104,
       99,  104,   95,   91,  107,   95,   95,  120,  110,   83,
       95,  112,   99,  107,  107,  122,  124,   83,   85,  106,
      317,  106,  108,  108,  108,  108,   85,  311,  114,  125,
      114,  310,   91,  114,  114,  240,  120,  300,   83,   95,
      240,   99,  106,  113,  122,  124,  113,   85,   90,  113,
      113,  126,  116,   90,  113,  116,  116,  123,  125,  123,
       90,   90,   90,   90,   90,   90,   90,  127,  121,   90,
      119,  106,  121,  119,  119,  113,  295,  128,  119,  131,

      126,  129,  129,  113,  132,  133,  123,  134,  123,   90,
       90,   90,   90,   90,   90,   90,  127,  121,   90,  130,
      135,  121,  130,  130,  113,  115,  128,  119,  131,  136,
      137,  138,  140,  132,  133,  141,  134,  115,  115,  115,
      115,  115,  115,  115,  139,  142,  115,  144,  145,  135,
      139,  143,  148,  147,  146,  157,  157,  156,  136,  137,
      138,  140,  147,  143,  141,  146,  115,  115,  115,  115,
      115,  115,  115,  139,  142,  115,  144,  145,  158,  139,
      143,  148,  147,  146,  151,  151,  156,  158,  158,  151,
      159,  147,  143,  294,  146,  152,  152,  161,  160,  161,

      152,  160,  161,  161,  160,  160,  159,  162,  274,  160,
      162,  162,  163,  165,  165,  163,  163,  176,  248,  166,
      163,  166,  166,  168,  255,  168,  255,  177,  168,  180,
      160,  168,  168,  184,  169,  159,  168,  169,  160,  169,
      244,  170,  169,  169,  189,  189,  176,  170,  233,  163,
      170,  170,  171,  171,  171,  171,  177,  168,  180,  160,
      208,  172,  184,  170,  172,  168,  206,  172,  172,  173,
      175,  173,  172,  198,  173,  173,  175,  192,  192,  175,
      175,  179,  181,  179,  181,  183,  168,  183,  193,  193,
      183,  183,  170,  172,  185,  179,  199,  257,  185,  257,

      185,  172,  198,  185,  185,  181,  186,  188,  203,  186,
      188,  188,  186,  186,  187,  182,  187,  186,  178,  187,
      187,  200,  172,  191,  179,  199,  191,  191,  194,  197,
      194,  191,  201,  194,  181,  202,  194,  194,  186,  195,
      204,  194,  195,  205,  195,  197,  186,  195,  195,  196,
      200,  207,  196,  196,  209,  210,  211,  212,  197,  213,
      191,  201,  194,  215,  202,  216,  167,  186,  217,  204,
      194,  218,  205,  219,  220,  221,  222,  223,  224,  225,
      207,  226,  227,  209,  210,  211,  212,  228,  213,  214,
      229,  194,  215,  214,  216,  214,  230,  217,  214,  214,

      218,  149,  219,  220,  221,  222,  223,  224,  225,  231,
      226,  227,  231,  231,  232,  232,  228,  253,  234,  229,
      230,  234,  234,  235,  235,  236,  234,  237,  236,  236,
      237,  237,  238,  256,  239,  247,  247,  238,  118,  241,
      238,  238,  239,  239,  241,  242,  253,  241,  241,  230,
       94,  243,  241,  242,  242,  234,  243,  250,  250,  243,
      243,  245,  256,  245,   88,  246,  245,  245,  246,  246,
      249,  261,  251,  249,  249,  251,  251,   86,  249,  252,
       80,  241,  254,  252,   64,  252,  259,  259,  252,  252,
      260,  254,  260,  260,  254,  262,  263,  263,   63,  262,

      261,  262,  264,  264,  262,  262,  265,  249,  278,  265,
      265,  254,  266,  266,  268,  269,  269,  268,  268,  279,
      254,  280,  268,  254,  270,  270,  271,  272,  281,  271,
      271,  273,  272,  275,  282,  272,  272,  278,  275,  273,
      273,  275,  275,  283,  276,  284,  275,  277,  279,  285,
      280,  268,  276,  276,  286,  277,  277,  281,  287,  288,
      289,  290,  292,  282,  293,  297,  297,  296,  299,   62,
      301,  296,  283,  296,  284,  275,  296,  296,  285,  302,
       43,  303,  304,  286,  305,  306,  307,  287,  288,  289,
      290,  292,  308,  293,  298,  309,  312,  299,  298,  301,

      298,  313,   42,  298,  298,  327,  314,   40,  302,  298,
      303,  304,  314,  305,  306,  307,  316,  298,  328,  316,
      316,  308,  329,  298,  309,  312,  320,  320,  318,  321,
      313,  321,  321,  318,  327,  314,  318,  318,  298,  323,
      330,  314,  323,  323,  324,  335,  298,  328,  324,  336,
      324,  329,  298,  324,  324,  325,  325,  326,  326,  331,
      333,  331,  334,  333,  333,  337,  339,  334,  340,  330,
      334,  334,  341,  342,  335,  343,  344,  345,  336,  346,
      344,  348,  344,  350,  349,  344,  344,  351,  351,  352,
      352,  354,  355,  356,  337,  339,  349,  340,  358,  359,

      360,  341,  342,  361,  343,  363,  345,  364,  346,  365,
      348,  366,  350,  349,   23,  369,  371,  372,  373,  375,
      354,  355,  356,  376,  380,  349,  381,  358,  359,  360,
      389,  389,  361,  367,  363,  383,  364,  367,  365,  367,
      366,  384,  367,  367,  369,  371,  372,  373,  375,  385,
      382,  386,  376,  380,  382,  381,  382,  387,  391,  382,
      382,  387,  392,  387,  383,  394,  387,  387,  395,  366,
      384,  390,  390,  388,  396,  397,  397,  388,  385,  388,
      386,  396,  388,  388,  398,  399,  400,  391,  401,  402,
      403,  392,  404,  405,  394,  406,  407,  395,  408,  409,

      411,   21,  410,  396,  413,  413,  414,  414,  415,  416,
      396,  410,  410,  398,  399,  400,  417,  401,  402,  403,
      418,  404,  405,  419,  406,  407,  412,  408,  409,  411,
      412,  420,  412,  421,  422,  412,  412,  415,  416,  423,
      425,  425,  429,   13,  424,  417,  462,  462,  424,  418,
      424,  430,  419,  424,  424,  426,  431,  432,  433,  426,
      420,  426,  421,  422,  426,  426,  428,  434,  423,  435,
      428,  429,  428,  437,  438,  428,  428,  439,  440,  441,
      430,  442,  444,  445,  443,  431,  432,  433,  443,  446,
      443,  447,  448,  443,  443,  449,  434,  451,  435,  452,

      453,    8,  437,  438,  449,  449,  439,  440,  441,  454,
      442,  444,  445,  450,  455,  456,  458,  460,  446,  464,
      447,  448,  450,  450,  466,  466,  451,  461,  452,  453,
      449,  461,    6,  461,  483,  483,  461,  461,  454,  468,
      469,  500,  500,  455,  456,  458,  460,  463,  464,  470,
      471,  463,  472,  463,  465,  473,  463,  463,  465,  449,
      465,  467,  476,  465,  465,  467,  478,  467,  468,  469,
      467,  467,  479,  481,    0,  486,  474,  487,  470,  471,
      474,  472,  474,  475,  473,  474,  474,  475,  488,  475,
      482,  476,  475,  475,  482,  478,  482,  489,  492,  482,

      482,  479,  481,  484,  486,  493,  487,  484,  494,  484,
      485,  497,  484,  484,  485,  498,  485,  488,  501,  485,
      485,  495,  495,  503,  503,    0,  489,  492,    0,  502,
      507,  508,  509,  502,  493,  502,  510,  494,  502,  502,
      497,  512,  512,    0,  498,  510,  510,  501,  504,  516,
      495,  495,  504,    0,  504,  513,  518,  504,  504,  507,
      508,  509,  511,  519,  513,  513,  511,  520,  511,  514,
      514,  511,  511,  515,  522,  522,  527,  513,  516,    0,
      521,  530,  515,  515,  521,  518,  521,  525,  525,  521,
      521,  523,  519,  526,  526,  523,  520,  523,  524,  533,

      523,  523,  524,  535,  524,  527,  513,  524,  524,  528,
      530,  536,  537,  528,  532,  528,  529,  538,  528,  528,
      529,  539,  529,  532,  532,  529,  529,  540,  533,  541,
      544,  544,  535,  542,    0,  547,  548,  542,  549,  542,
      536,  537,  542,  542,    0,  543,  538,  549,  549,  543,
      539,  543,  556,  545,  543,  543,  540,  545,  541,  545,
      550,  550,  545,  545,  547,  548,  551,  552,  554,  557,
      552,  559,  559,  552,  552,  551,  551,  553,  552,  553,
      560,  556,  553,  553,    0,  558,  562,  562,  551,  558,
      554,  558,  567,  569,  558,  558,  561,  570,  557,  552,

      561,  563,  561,  565,  571,  561,  561,  552,  572,  560,
      563,  563,  565,  565,  566,  573,  574,  551,  575,  554,
      579,  567,  569,  566,  566,  576,  570,  563,  552,  576,
      580,  576,    0,  571,  576,  576,  590,  572,  565,  577,
      577,    0,  578,    0,  573,  574,  578,  575,  578,  579,
      581,  578,  578,  581,  581,    0,  563,  582,  582,  580,
      583,  585,  585,    0,  583,  590,  583,  565,  584,  583,
      583,  584,  584,  586,  591,  592,  584,  586,  587,  586,
      593,  587,  586,  586,  587,  587,  588,  593,  588,  587,
      589,  588,  588,  595,  589,  596,  589,  597,  598,  589,

      589,  592,  600,  591,  601,  584,  600,  602,  600,  593,
      587,  600,  600,  603,  603,  604,  593,    0,  587,  605,
      607,  607,  595,    0,  596,    0,  597,  598,  605,  605,
      592,  606,    0,  601,    0,  606,  602,  606,  620,  587,
      606,  606,  608,  608,  604,  609,  610,    0,  609,  609,
      610,  622,  610,  625,  611,  610,  610,  611,  611,  612,
      612,  614,  615,  615,  614,  614,  616,  620,  617,  614,
      618,  618,  617,  627,  617,  616,  616,  617,  617,  619,
      622,  621,  625,  619,  628,  619,  630,  632,  619,  619,
      621,  621,  633,  633,    0,  629,  632,  632,  614,  629,

        0,  629,  627,  635,  629,  629,  635,  635,  634,  637,
      637,  639,  634,  628,  634,  630,  636,  634,  634,  643,
      636,  640,  636,  638,  644,  636,  636,  638,  646,  638,
      640,  640,  638,  638,  641,  641,  641,  652,  648,  655,
      639,  649,  649,  650,  650,  651,  651,  656,  643,  648,
      653,  653,  654,  644,  658,  659,  654,  646,  654,  662,
      662,  654,  654,  660,  660,  660,  652,  664,  655,    0,
      648,  661,  667,  668,  668,  661,  656,  661,  648,    0,
      661,  661,  663,  658,  659,    0,  663,    0,  663,  670,
      670,  663,  663,    0,  665,    0,  664,    0,  665,  648,

      665,  667,  669,  665,  665,    0,  669,    0,  669,  671,
        0,  669,  669,  671,    0,  671,  673,    0,  671,  671,
      673,    0,  673,  674,  674,  673,  673,  675,  677,  677,
      677,  675,    0,  675,  676,    0,  675,  675,  676,    0,
      676,  678,    0,  676,  676,  678,    0,  678,  679,    0,
      678,  678,  679,    0,  679,  680,  680,  679,  679,  681,
      683,  683,    0,  681,    0,  681,  682,    0,  681,  681,
      682,    0,  682,  684,    0,  682,  682,  684,    0,  684,
      685,    0,  684,  684,  685,  687,  685,  686,  686,  685,
      685,  688,  688,  689,  687,  687,    0,  689,    0,  689,

      690,  690,  689,  689,  691,  692,  692,  687,  691,  693,
      691,  697,  697,  691,  691,  699,  699,  694,  693,  693,
      694,    0,  698,  694,  694,  698,  698,  695,  694,  695,
        0,  693,  695,  695,  702,  702,  687,  696,  696,  696,
      701,  700,    0,  701,  701,  700,    0,  700,  701,  694,
      700,  700,  703,  704,  704,    0,  703,  694,  703,  705,
      693,  703,  703,  705,    0,  705,  706,  706,  705,  705,
      707,  707,  708,  710,  710,  708,  708,  701,  694,  709,
        0,    0,    0,  709,    0,  709,    0,    0,  709,  709,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  715,    0,    0,  715,  715,  715,  715,
      715,  715,  716,  716,  716,  716,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  718,  718,  718,
      718,  719,  719,  719,    0,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,    0,  720,  720,  720,  720,
      720,  720,  720,  721,    0,  721,  721,  721,  722,    0,
        0,    0,  722,  722,  722,  722,  722,  723,  723,  723,
      724,  724,    0,  724,  724,  724,  724,  724,  724,  724,

      724,  725,  725,  726,    0,    0,    0,    0,  726,  726,
      726,  726,  727,    0,    0,    0,    0,    0,  727,  727,
      727,  728,  728,  729,    0,    0,    0,    0,    0,  729,
      729,  730,    0,    0,    0,    0,  730,  730,  730,  730,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "textmidi.l"
#line 2 "textmidi.l"
/*
** textmidi.l 1.0
** Copyright © 2021 Thomas E. Janzen
** License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>
** This is free software: you are free to change and redistribute it.
** There is NO WARRANTY, to the extent permitted by law.
**
** textmidi converts text files that are written in textmidi MIDI language
** into standard MIDI file binary format files.
**
** HISTORY
**    1999: first version
**    2003: enhanced to use to sequence the Schumann Quintet,
**          which was submitted to the classical MIDI archive.
**    2021: C++ upgrades, fuller MIDI implementation to MIDI 1.1
**
** textmidi.l is a flex tokenizer specification for recognizing textmidi language
** in order to write binary MIDI files for musical purposes.
**
*/
#if HAVE_CONFIG_H
#  include <config.h>
#endif /* HAVE_CONFIG_H */
#include <endian.h>

#include <climits>
#include <cmath>

#include <algorithm>
#include <array> // scale step constant
#include <fstream>
#include <iostream>
#include <iterator>
#include <map>   // MIDI codes and textmidi strings
#include <regex> // recognize note names
#include <cctype>
#include <sstream>
#include <string>
#include <vector>
#include <utility> // pair
#include <tuple>
#include <stdexcept>

#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string/case_conv.hpp>

#include "Midi.h" // MIDI codes and MIDI file header
#include "MIDIKeyString.h"
#include "textmidi.h" // For this file's interfaces to main.cc

using namespace std;
using namespace boost;
using namespace boost::algorithm; // for to_upper(string)
using namespace textmidi;

#if 0
extern "C" int32_t yywrap (void) {};
#endif

string text_filename{}; // set in main.cc as option
uint32_t line_ctr{1};   // printed in main.cc as option
uint32_t detache{10};   // set from cmd line; separation between notes
ofstream midi_filestr{}; // set in main.cc
bool verbose{};          // set in main.cc as option

namespace
{
    // The last MIDI key (note) that was played, init to middle C
    constexpr int middle_c{60};
    int last_key{middle_c};
    uint16_t track_counter{}; // Count the tracks in order to set MIDI header
    vector<uint8_t> trackchunk; // One track's data bytes.
    uint32_t accum_delay{}; // Delay accumulated between events.
    double global_total_track_ticks{}; // accum. tracks ticks to print for "ticks" cmd
    uint32_t total_beats{}; // beat to print for errors.
    // running_status is a MIDI trick to avoid repeating events such as NOTE_ON.
    uint8_t running_status{};
    // To turn off notes using NOTE_ON, use a zero velocity.
    constexpr uint8_t note_off_velocity{};
    constexpr double DotLength(0.5);
    constexpr double DoubleDotLength(0.25);
    // Map textmidi strings to MIDI file format codes.
    const map<const string_view, uint8_t> text_meta_map{
                  {"TEXT",         text_prefix},
                  {"COPYRIGHT",    copyright_prefix},
                  {"TRACK",        track_name_prefix},
                  {"INSTRUMENT",   instrument_name_prefix},
                  {"LYRIC",        lyric_prefix},
                  {"MARKER",       marker_prefix},
                  {"CUE_POINT",    cue_point_prefix}
              };
    const map<string_view, uint8_t> text_control_map{
        {"RESETALL",     control_reset_all_ctrl},
        {"ALLNOTES_OFF", control_all_notes_off},
        {"ALL_SOUND_OFF", control_all_sound_off},
        {"BREATH",       control_breath},
        {"DAMPER",       control_damper},
        {"SOFTPEDAL",    control_softpedal},
        {"PORTAMENTO",   control_portamento},
        {"SOSTENUTO",    control_sostenuto},
    };
    // PORTAMENTO and SOSTENUTO have an "on" or "off" value.
    const map<string, uint8_t> OnOffMap{{"OFF", control_off}, {"ON", control_full}};

    int global_ticks_per_quarter{384};
    // global_channel is part of implementing MIDI running status
    // because channel is part of a command.
    uint32_t global_channel{}; // [0..15]

    // MIDI Pan is actually excess 64,
    // but textmidi treats it as -64..0..63, where 0 is center.
    // In addition we allow the words "left", "center", and "right".
    const map<string_view, int> PanStringToValue{{"left", 0},
                                                 {"center", 64},
                                                 {"right", 127}};

    // keyevent_to_keynumber
    // converts a string keyevent, which can include tie-in and tie-out,
    // may be a note name such as "C4" or may be a key number as in "K60"
    // or may be a delta key as in "K+2".
    int keyevent_to_keynumber(const string& keyevent,
                              bool& tie_in, bool& tie_out, bool& is_delta)
    {
        int keynumber{};
        smatch matches{};
        //
        // Hard Lessons: you can't break a line with a backslash in the middle of a
        // Raw regular expression
        const regex keyevent_re{R"((-?)(((([A-Ga-g])(([b#x]?)|(bb)))(-?)([0-9]))|(([Kk])([+-]?)([[:digit:]]+)))(-?))"};
        auto sts{regex_match(keyevent, matches, keyevent_re)};
        constexpr int match_tie_in{1};
        constexpr int match_note_or_key{2};
        constexpr int match_tie_out{15};
        tie_in  = !matches[match_tie_in].str().empty();
        tie_out = !matches[match_tie_out].str().empty();

        if (!matches[match_note_or_key].str().empty())
        {
            tie(keynumber, is_delta)
                = pitchname_to_keynumber(matches[match_note_or_key]);
        }
        return keynumber;
    }

    // KeyTie is a class that can hold the note event as a key number
    // and its ties in and out.
    struct KeyTie
    {
        KeyTie (string& key_name)
            : tie_in_{},
              key_{},
              tie_out_{}
        {
            bool is_delta{};
            int signed_key{keyevent_to_keynumber(key_name,
                             tie_in_, tie_out_, is_delta)};
            if (is_delta)
            {
               key_ = static_cast<unsigned>(last_key + signed_key);
               last_key = static_cast<int>(key_);
            }
            else
            {
                key_ = static_cast<unsigned>(signed_key);
                last_key = static_cast<int>(key_);
            }
            if (tie_in_)
            {
                key_name.erase(0, 1);
            }
            if (tie_out_)
            {
                key_name.erase(key_name.size() - 1);
            }
        }

        bool tie_in_;
        uint32_t key_;
        bool tie_out_;
    };


#if 0
    char
    tolowerf(char anycase)
    {
        return tolower(anycase);
    }
#endif

    //
    // int_to_vec
    // converts numbers into MIDI 1.1 spec extended values,
    // which can be a vector of bytes.
    // The first byte is the most-significant and has the 2^7 bit set.
    vector<uint8_t> int_to_vec(int i)
    {
        constexpr size_t bits_per_bite{7};
        int64_t bites{(((sizeof i) * bits_per_byte) / bits_per_bite) + 1};

        constexpr uint8_t dataflag{0x80};
        vector<uint8_t> numvec{};
        for (int64_t ctr{bites - 1}; ctr >= 0; --ctr)
        {
            uint8_t tempbite{static_cast<uint8_t>((i >> (7 * ctr) ) & byte7_mask)};
            if ((tempbite != 0) || (0 == ctr))
            {
                if (ctr > 0)
                {
                    tempbite |= dataflag;
                }
                numvec.push_back(tempbite);
            }
        }
        numvec.back() &= ~dataflag;
        return numvec;
    }

    //
    // int24_to_vec converts 24-bit numbers to MIDI extended values.
    vector<uint8_t> int24_to_vec(int i)
    {
        vector<uint8_t> numvec;
        uint8_t tempbyte{};
        constexpr uint8_t byte_mask{0xFF};
        for (int ctr{2}; ctr >= 0; --ctr)
        {
            tempbyte = (i >> (bits_per_byte * ctr) ) & byte_mask;
            numvec.push_back(tempbyte);
        }
        return numvec;
    }

    // In MIDI it is not necessary to repeat commands such as NOTE_ON
    // if the command and channel are the same in successive commands.
    // This requires keeping track of the command and channel.
    void check_running_status(const int32_t status_byte)
    {
        if (status_byte != running_status)
        {
            trackchunk.push_back(status_byte);
            running_status = status_byte;
        }
    }

    //
    // write_delay writes the time delay in MIDI ticks.
    void write_delay()
    {
        // Delays must occur between events even if delay is zero.
        vector<uint8_t> delayvec{int_to_vec(accum_delay)};
        trackchunk.insert(trackchunk.end(), delayvec.begin(), delayvec.end());
        total_beats += (accum_delay / global_ticks_per_quarter);
        accum_delay = 0;
    }

    //
    // shift_channel
    // transforms a textmidi channel in (1..16)
    // to a MIDI binary channel in (0..15).
    void shift_channel(uint32_t& channel)
    {
        if (0 == channel)
        {
            cerr << text_filename << ':' << line_ctr
                 << " Channel was zero (0) and left as zero; "
                 << "channels must be in [1..16]\n";
        }
        global_channel
            = channel = (((channel > 0) ? (channel - 1) : channel) & channel_mask);
    }

    uint32_t delay_and_update_total_ticks(double thenumerator,
            double thedivisor, bool dotted, bool double_dotted)
    {
        // This routine handles full note rhythm value.
        // detache adjustments are done in the client
        // after calling this function.
        double ticks{};
        if (thedivisor != 0.0)
        {
          // Musical values are in whole notes, as a 1/4 note
          // is 1/4 of a whole note, but MIDI specifies ticks per quarter.
          ticks = (static_cast<double>(QuartersPerWhole) * thenumerator
                 * static_cast<double>(global_ticks_per_quarter))
                 / static_cast<double>(thedivisor);
        }
        if (dotted) // dotted notes
        {
            auto save_ticks{ticks};
            // This looks backwards but
            // We are here because we know there is a dot at the end.
            // If there is a dot in front of it we know it was a
            // double-dot; hence the proper lengths get added.
            ticks += (save_ticks * DotLength);
            if (double_dotted) // double dotted notes
            {
                ticks += (save_ticks * DoubleDotLength);
            }
        }
        // We update total ticks with the full duration
        // although detache might get subtracted in the caller.
        // So global_total_track_ticks includes the detache value.
        const auto temp_total_track_ticks = global_total_track_ticks + ticks;
        // To address the running sums problem.
        // Tracks were long or short due to accumulating rounding errors.
        if ((temp_total_track_ticks - trunc(temp_total_track_ticks)) >= 0.5)
        {
            ticks += 0.5; // put it over the next integer value up.
        }
        // Now it's OK to use round().
        ticks = round(ticks);
        global_total_track_ticks += ticks; 
        return ticks;
    }
}

namespace lazy
{
    bool note_off_select{}; // set in main.cc as option
    uint32_t dynamic{64};
    vector<KeyTie> chord{};
}

#line 1542 "textmidi.cc"
/* definitions */

#line 1545 "textmidi.cc"

#define INITIAL 0
#define FILE_HEADER_STATE 1
#define LAZY_STATE 2
#define DETAIL_STATE 3
#define TEXT_META_STATE 4
#define QUOTE_STATE 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 383 "textmidi.l"

#line 1772 "textmidi.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 712 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2341 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 384 "textmidi.l"
{
    /* Recognize FILEHEADER */
    BEGIN(FILE_HEADER_STATE);
  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 389 "textmidi.l"
{
    /* After FILEHEADER, recognize {number of tracks (discarded)} {ticks per quarter note} {MONOTRACK|MULTITRACK|MULTISEQUENCE} */
    MidiHeader midi_header{};
    istringstream stringstream(yytext);
    string format_str;
    stringstream >> midi_header.ntrks_ >> midi_header.division_ >> format_str;
    to_upper(format_str);
    auto fmf{textmidi::format_map.find(format_str)};
    if (fmf != textmidi::format_map.end())
    {
        midi_header.format_ = fmf->second;
    }
    else
    {
        cerr << text_filename << ':' << line_ctr
             << " File format was: " << format_str << " but must be in {";
        for (const auto& fmp : textmidi::format_map)
        {
            cerr << fmp.first << ", ";
        }
        cerr << "} or omitted for a default of MULTITRACK\n";
    }
    if ((MIDI_Format::MonoTrack == midi_header.format_)
        && (midi_header.ntrks_ > 1))
    {
        cerr << text_filename << ':' << line_ctr
             << " File format was MONOTRACK which allows only one track"
             << " but there are " << midi_header.ntrks_ << '\n';
    }
    global_ticks_per_quarter = midi_header.division_;
    midi_header.swap();
    midi_filestr.write(io_bytes(midi_header), sizeof(MidiHeader));
    BEGIN(DETAIL_STATE);
  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 424 "textmidi.l"
{
    /* Recognize {number of tracks (discarded)} {ticks per quarter} */
    MidiHeader midi_header{};
    midi_header.format_ = MIDI_Format::MultiTrack;
    istringstream stringstream(yytext);
    stringstream >> midi_header.ntrks_ >> midi_header.division_;
    global_ticks_per_quarter = midi_header.division_;
    midi_header.swap();
    midi_filestr.write(io_bytes(midi_header), sizeof(MidiHeader));
    BEGIN(DETAIL_STATE);
  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 437 "textmidi.l"
{
    /* Enter LAZY mode. */
    BEGIN(LAZY_STATE);
  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 442 "textmidi.l"
{
    /* Enter DETAIL mode. */
    BEGIN(DETAIL_STATE);
  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 447 "textmidi.l"
{
    /* Recognize STARTTRACK */
    ++track_counter;
    trackchunk.clear();
    trackchunk.push_back('M');
    trackchunk.push_back('T');
    trackchunk.push_back('r');
    trackchunk.push_back('k');
    trackchunk.push_back(0);
    trackchunk.push_back(0);
    trackchunk.push_back(0);
    trackchunk.push_back(0);
    total_beats = 0;
    global_total_track_ticks = 0.0;
    running_status = 0;
  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 464 "textmidi.l"
{
    /* Recognize (TEXT|COPYRIGHT|TRACK|INSTRUMENT|LYRIC|MARKER|CUE_POINT) */
    /* This may be followed by a double-quoted string, or a non-quoted string */
    /* to the end of the line. */
    write_delay();
    istringstream stringstream(yytext);
    string meta_name{};
    stringstream >> meta_name;
    auto prefix{text_meta_map.find(meta_name)};
    if (prefix != text_meta_map.end())
    {
        trackchunk.push_back(meta_prefix);
        trackchunk.push_back(prefix->second);
    }
    else
    {
        cerr << text_filename << ':' << line_ctr
             << " Invalid meta event name " << meta_name << '\n';

    }
    BEGIN(TEXT_META_STATE);
  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 487 "textmidi.l"
{
    /* Recognize start of a quoted string. */
    BEGIN(QUOTE_STATE);
  }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 492 "textmidi.l"
{
    /* Recognize the remainder of the line */
    string yystring{yytext};
    if (!yystring.empty() && ('\n' == yystring[yystring.length() - 1]))
    {
        yystring.erase(yystring.length() - 1);
    }
    vector<uint8_t> len_vec{int_to_vec(yystring.length())};
    trackchunk.insert(trackchunk.end(), len_vec.begin(), len_vec.end());
    trackchunk.insert(trackchunk.end(), yystring.begin(), yystring.end());
    BEGIN(DETAIL_STATE);
  }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 505 "textmidi.l"
{
    /* Recognize start of a quoted string. */
    string yystring{yytext};
    if (!yystring.empty() && ('\n' == yystring[yystring.length() - 1]))
    {
        yystring.resize(yystring.length() - 1);
    }
    vector<uint8_t> len_vec{int_to_vec(yystring.length())};
    trackchunk.insert(trackchunk.end(), len_vec.begin(), len_vec.end());
    trackchunk.insert(trackchunk.end(), yystring.begin(), yystring.end());
  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 517 "textmidi.l"
{
    /* Recognize end of quoted string and return to DETAIL state. */
    BEGIN(DETAIL_STATE);
  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 522 "textmidi.l"
{
    /* Recognize the end of a track. */
    write_delay();
    trackchunk.push_back(meta_prefix);
    trackchunk.push_back(end_of_track_prefix[0]);
    trackchunk.push_back(end_of_track_prefix[1]);
    const auto sizetemp{trackchunk.size() - 8};
    trackchunk[4] = (sizetemp >> 24) & 0xFF;
    trackchunk[5] = (sizetemp >> 16) & 0xFF;
    trackchunk[6] = (sizetemp >>  8) & 0xFF;
    trackchunk[7] = (sizetemp >>  0) & 0xFF;
    copy(trackchunk.begin(), trackchunk.end(),
         ostream_iterator<uint8_t>(midi_filestr));
    accum_delay = 0;
    BEGIN(DETAIL_STATE);
  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 539 "textmidi.l"
{
    /* Recognize TEMPO {num} */
    write_delay();
    istringstream stringstream(yytext);
    string discard{};
    uint32_t mmtempo{60};
    stringstream >> discard >> mmtempo;
    running_status = 0;
    // convert ticks per minute to useconds per quarter
    uint32_t tempo{(60 * 1000000) / mmtempo};

    vector<uint8_t> tempovec{int24_to_vec(tempo)};
    trackchunk.push_back(meta_prefix);

    trackchunk.insert(trackchunk.end(), &tempo_prefix[0], &tempo_prefix[2]);
    trackchunk.insert(trackchunk.end(), tempovec.begin(), tempovec.end());
  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 557 "textmidi.l"
{
    /* Recognize DELAY num (the number of ticks) */
    istringstream stringstream(yytext);
    string discard{};
    uint32_t delay{};
    stringstream >> discard >> delay;
    accum_delay += delay;
    global_total_track_ticks += static_cast<double>(delay);
  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 567 "textmidi.l"
{
    /* Recognize NOTE_ON {chan} {pitch} {velocity num}. */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t channel{}, // [1..16]
             key{},
             velocity{};
    string pitch_name;
    stringstream >> discard >> channel >> pitch_name >> velocity;

    shift_channel(channel);

    bool is_delta{};
    int signed_key{};
    tie(signed_key, is_delta) = pitchname_to_keynumber(pitch_name);
    if (is_delta)
    {
       key = static_cast<unsigned>(last_key + signed_key);
       last_key = static_cast<int>(key);
    }
    else
    {
        key = static_cast<unsigned>(signed_key);
        last_key = static_cast<int>(key);
    }

    check_running_status(channel | note_on);

    key      &= byte7_mask;
    velocity &= byte7_mask;
    trackchunk.push_back(key);
    trackchunk.push_back(velocity);
  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 603 "textmidi.l"
{
    /* Recognize NOTE_OFF {channel} {Pitch} {velocity}. */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t channel{},
             key{},
             velocity{};
    string pitch_name;
    stringstream >> discard >> channel >> pitch_name >> velocity;
    shift_channel(channel);

    bool is_delta{};
    int signed_key{};
    tie(signed_key, is_delta) = pitchname_to_keynumber(pitch_name);
    if (is_delta)
    {
       key = static_cast<unsigned>(last_key + signed_key);
       last_key = static_cast<int>(key);
    }
    else
    {
        key = static_cast<unsigned>(signed_key);
        last_key = static_cast<int>(key);
    }
    check_running_status(channel | note_off);

    key &= byte7_mask;
    velocity &= byte7_mask;
    trackchunk.push_back(key);
    trackchunk.push_back(velocity);
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 638 "textmidi.l"
{
    /* Recognize POLY_KEY_PRESSURE {channel} {pitchname} {velocity num} */
    istringstream stringstream(yytext);
    string discard;
    uint32_t channel{},
             key{},
             pressure{};
    string pitch_name;
    stringstream >> discard >> channel >> pitch_name >> pressure;
    shift_channel(channel);

    bool is_delta{};
    int signed_key{};
    tie(signed_key, is_delta) = pitchname_to_keynumber(pitch_name);
    if (is_delta)
    {
       key = static_cast<unsigned>(last_key + signed_key);
       last_key = static_cast<int>(key);
    }
    else
    {
        key = static_cast<unsigned>(signed_key);
        last_key = static_cast<int>(key);
    }

    write_delay();
    check_running_status(channel | poly_key_pressure);

    key &= byte7_mask;
    pressure &= byte7_mask;
    trackchunk.push_back(key);
    trackchunk.push_back(pressure);
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 673 "textmidi.l"
{
    /* Recognize CONTROL {channel} {control_id} {control_value} */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t channel{};
    int32_t control_id{},
            control_value{};
    stringstream >> discard >> channel >> control_id >> control_value;
    shift_channel(channel);

    check_running_status(channel | control);

    control_id &= byte7_mask;
    trackchunk.push_back(control_id);
    control_value &= byte7_mask;
    trackchunk.push_back(control_value);
  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 693 "textmidi.l"
{
    /* Recognize {RESETALL|ALLNOTES_OFF|ALL_SOUND_OFF} {channel} */
    write_delay();

    string namestr{};
    int32_t control_id{};
    uint32_t channel{};
    istringstream stringstream{yytext};
    stringstream >> namestr >> channel;
    shift_channel(channel);

    try
    {
        control_id = text_control_map.at(namestr);
    }
    catch (out_of_range &oor)
    {
        cerr << "unknown control channel: " << text_filename << ':' << line_ctr
             << ' ' << namestr<< oor.what() << '\n';
        exit(EXIT_SUCCESS);
    }

    check_running_status(channel | control);
    trackchunk.push_back(control_id);
    trackchunk.push_back(0);
  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 720 "textmidi.l"
{
    /* Recognize {BREATH|DAMPER|SOFTPEDAL} {channel} {control_value_num} */
    write_delay();

    string namestr;
    uint32_t channel{};
    int32_t control_id{},
        control_value{};
    istringstream stringstream(yytext);
    stringstream >> namestr >> channel >> control_value;
    shift_channel(channel);
    try
    {
        control_id = text_control_map.at(namestr);
    }
    catch (out_of_range &oor)
    {
        cerr << "unknown control channel: " << text_filename << ':' << line_ctr
             << ' ' << namestr<< oor.what() << '\n';
        exit(EXIT_SUCCESS);
    }

    check_running_status(channel | control);
    trackchunk.push_back(control_id);
    control_value &= byte7_mask;
    trackchunk.push_back(control_value);
  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 748 "textmidi.l"
{
    /* Recognize {PORTAMENTO|SOSTENUTO} {channel num} {ON|OFF} */
    write_delay();

    string namestr;
    uint32_t channel{};
    string onoff{};
    istringstream stringstream(yytext);
    stringstream >> namestr >> channel >> onoff;
    shift_channel(channel);
    int32_t control_id{};
    try
    {
        control_id = text_control_map.at(namestr);
    }
    catch (out_of_range &oor)
    {
        cerr << "unknown control : " << text_filename << ':' << line_ctr
             << ' ' << namestr << ' ' << oor.what() << '\n';
        exit(EXIT_SUCCESS);
    }

    uint8_t control_value{};
    try
    {
        control_value = OnOffMap.at(onoff);
    }
    catch (out_of_range &oor)
    {
        cerr << "unknown control on/off: " << text_filename << ':' << line_ctr
             << ' ' << onoff << ' ' << oor.what() << '\n';
        exit(EXIT_SUCCESS);
    }

    check_running_status(channel | control);
    trackchunk.push_back(control_id);
    trackchunk.push_back(control_value);
  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 787 "textmidi.l"
{
    /* Recognize PAN {channel num} {LEFT|CENTER|RIGHT|-64 to 63} */
    string namestr{};
    string panstring{};
    int32_t pancode{};
    write_delay();

    uint32_t channel{};
    istringstream stringstream(yytext);
    stringstream >> namestr >> channel >> panstring;
    to_lower(panstring);
    shift_channel(channel);

    auto pstvi{PanStringToValue.find(panstring)};
    if (PanStringToValue.end() == pstvi)
    {
        pancode = lexical_cast<int>(panstring);
        pancode += PanExcess64;
    }
    else
    {
        pancode = pstvi->second;
    }
    check_running_status(channel | control);
    trackchunk.push_back(control_pan);
    pancode &= byte7_mask;
    trackchunk.push_back(pancode);
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 816 "textmidi.l"
{
    /* Recognize PROGRAM {channel num} {program number} */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t channel {},
             theprogram {};
    stringstream >> discard >> channel >> theprogram;
    shift_channel(channel);

    check_running_status(channel | program);
    --theprogram;
    theprogram &= byte7_mask;
    trackchunk.push_back(theprogram);
  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 833 "textmidi.l"
{
    /* Recognize CHANNEL_PRESSURE {channel} {pressure}*/
    write_delay();
    istringstream stringstream(yytext);
    string discard;
    uint32_t channel {},
                 pressure{};
    stringstream >> discard >> channel >> pressure;
    shift_channel(channel);

    // looks like a kluge. Does channel_pressure participate in running_status?
    running_status = 0;
    check_running_status(channel | channel_pressure);

    pressure &= byte7_mask;
    trackchunk.push_back(pressure);
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 851 "textmidi.l"
{
    /* Recognize PITCH_WHEEL {channel} {bend num} */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t channel {},
             bend{};
    stringstream >> discard >> channel >> bend;
    shift_channel(channel);

    const auto status_byte{channel | pitch_wheel};
    check_running_status(status_byte);

    uint32_t bendlsb{},
             bendmsb{};
    bendlsb = bend & byte7_mask;
    trackchunk.push_back(bendlsb);
    bendmsb = (bend >> 7) & byte7_mask;
    trackchunk.push_back(bendmsb);
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 873 "textmidi.l"
{
    /* Recognize TIME_SIGNATURE {beats per bar} {beats per measure} {MIDI ticks per beat} */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t numer{},
             denom{},
             ticksperbeat{};
    constexpr uint32_t thirtysecsperqtr{8};
    stringstream >> discard >> numer >> denom >> ticksperbeat;
    running_status = 0;
    // convert ticks per minute to useconds per quarter
    uint32_t denom_pwr{};
    while (denom >>= 1)
    {
      ++denom_pwr;
    }

    trackchunk.push_back(meta_prefix);

    trackchunk.insert(trackchunk.end(),
        &time_signature_prefix[0], &time_signature_prefix[2]);
    trackchunk.push_back(numer);
    trackchunk.push_back(denom_pwr);
    auto tempticksperbeat{ticksperbeat};
    while (tempticksperbeat > numeric_limits<uint8_t>().max())
    {
        tempticksperbeat /= 2;
    }
    trackchunk.push_back(tempticksperbeat);
    trackchunk.push_back(thirtysecsperqtr);
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 907 "textmidi.l"
{
    /* Recognize KEY_SIGNATURE {key as in a for a minor, or Db for D-flat Major */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    string key_sig_name;
    stringstream >> discard >> key_sig_name;
    int32_t themode{};
    int32_t accidentals;
    // tie is C++ tie for 2 returns, not musical tie.
    tie(accidentals, themode) = key_sig_name_to_accidentals(key_sig_name);

    trackchunk.push_back(meta_prefix);
    trackchunk.push_back(key_signature_prefix[0]);
    trackchunk.push_back(key_signature_prefix[1]);
    trackchunk.push_back(static_cast<signed char>(accidentals));
    trackchunk.push_back(themode);
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 927 "textmidi.l"
{
    /* Recognize SMPTE_OFFSET HH:MM:SS:FR:FF (hours:minutes:seconds:frames: 1/100's of frames) */
    write_delay();

    string yystring{yytext},
           discard;
    size_t colonpos{};
    vector<int> offsets{0};
    while ((colonpos = yystring.find(':', colonpos)) != yystring.npos)
    {
        ++colonpos;
        offsets.push_back(colonpos);
    }
    offsets.push_back(colonpos);
    vector<int> offsetvalues;
    for (auto i{0U}; i < (offsets.size() - 1); ++i)
    {
        string str{yystring.substr(offsets[i],
            offsets[i + 1] - offsets[i] - 1)};
        offsetvalues.push_back(lexical_cast<int>(str));
    }
    trackchunk.push_back(meta_prefix);
    trackchunk.push_back(smpte_prefix[0]);
    trackchunk.push_back(smpte_prefix[1]);
    for (auto offsetval : offsetvalues)
    {
        trackchunk.push_back(offsetval);
    }
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 957 "textmidi.l"
{
    /* Recognize MIDI_CHANNEL {channel} */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    uint32_t channel{};
    stringstream >> discard >> channel;
    shift_channel(channel);

    trackchunk.push_back(meta_prefix);
    trackchunk.push_back(midi_channel_prefix[0]);
    trackchunk.push_back(midi_channel_prefix[1]);
    trackchunk.push_back(channel);
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 973 "textmidi.l"
{
    /* Recognize MIDI_PORT {port} */
    write_delay();

    istringstream stringstream(yytext);
    string discard;
    int32_t port{};
    stringstream >> discard >> port;

    trackchunk.push_back(meta_prefix);
    trackchunk.push_back(midi_port_prefix[0]);
    trackchunk.push_back(midi_port_prefix[1]);
    trackchunk.push_back(port);
  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 988 "textmidi.l"
{
    /* Recognize SYSEX {byte}... */
    /* The textmidi text file should not have the starting F0 or length */
    /* or the trailing F7. */
    /* textmidi will add the SYSEX (0xF0) and the length at the front */
    /* as well as well the end-of-sysex (F7) at the end. */
    write_delay();

    istringstream iss{yytext};
    string next_word{};
    iss >> next_word;
    vector<string> byte_strings;
    while (iss)
    {
        iss >> next_word;
        if (iss && !next_word.empty())
        {
            byte_strings.push_back(next_word);
        }
    }
    vector<unsigned> bytes(byte_strings.size());
    transform(byte_strings.begin(),
        byte_strings.end(), bytes.begin(), [](const string& str)
        {
            unsigned i{};
            if (str.substr(0, 2) == "0x")
            {
                istringstream iss{str};
                iss >> hex >> i;
            }
            else
            {
                i = lexical_cast<unsigned>(str);
            }
            return i;
        }
    );
    // pushd the length of data plus the F7 at end
    // of the MIDI file stream.
    trackchunk.push_back(start_of_sysex);
    auto length_seq{int_to_vec(bytes.size() + 1)};
    trackchunk.insert(trackchunk.end(), length_seq.begin(), length_seq.end());
    if (bytes.size() > 0)
    {
        for (auto bi{bytes.begin()}; bi != bytes.end(); ++bi)
        {
            trackchunk.push_back(*bi);
        }
    }
    trackchunk.push_back(end_of_sysex);
  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1040 "textmidi.l"
{
    /* Recognize SYSEXRAW {byte}... */
    /* The textmidi text file should not have the starting F7 or length. */
    /* textmidi will add the 0xF7 and the length at the front */
    /* There is NO end-of-sysex (F7) at the end. */
    write_delay();

    string next_word{};
    istringstream iss{yytext};
    iss >> next_word;
    vector<string> byte_strings;
    while (iss)
    {
        iss >> next_word;
        if (iss && !next_word.empty())
        {
            byte_strings.push_back(next_word);
        }
    }
    vector<unsigned> bytes(byte_strings.size());
    transform(byte_strings.begin(),
         byte_strings.end(), bytes.begin(), [](const string& str)
        {
            unsigned i{};
            if (str.substr(0, 2) == "0x")
            {
                istringstream iss{str};
                iss >> hex >> i;
            }
            else
            {
                i = lexical_cast<unsigned>(str);
            }
            return i;
        }
    );
    // pushd the length of data plus the F7 at end
    // of the MIDI file stream.
    trackchunk.push_back(end_of_sysex); // Raw SYSEX *starts* with F7
    // length of data; no implied terminating F0
    auto length_seq{int_to_vec(bytes.size())};
    trackchunk.insert(trackchunk.end(), length_seq.begin(), length_seq.end());
    if (bytes.size() > 0)
    {
        for (auto bi{bytes.begin()}; bi != bytes.end(); ++bi)
        {
            trackchunk.push_back(*bi);
        }
    }
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1091 "textmidi.l"
{
    /* Recognize ticks {string to end of line} */
    /* This will print to the screen, the accumulated ticks at this point
    ** in the current track for auditing purposes (such as tracks
    ** being different lengths in ticks). */
    string ticks_str{};
    (((ticks_str += "Ticks: ")
        += lexical_cast<string>(global_total_track_ticks)) += ' ') += yytext;
    cout << ticks_str << '\n';
    {
      write_delay();
      trackchunk.push_back(meta_prefix);
      trackchunk.push_back(text_prefix);
      vector<uint8_t> len_vec{int_to_vec(ticks_str.length())};
      trackchunk.insert(trackchunk.end(), len_vec.begin(), len_vec.end());
      trackchunk.insert(trackchunk.end(), ticks_str.begin(), ticks_str.end());
    }
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1110 "textmidi.l"
{
    /* Recognize a dynamic as in pppp..mf..forte..ff..ffff */
    string note_name{yytext};
    uint32_t dynamic = 64;

    to_lower(note_name);
    if (note_name == "pppp")
    {
      dynamic = 10;
    }

    if (note_name == "ppp")
    {
      dynamic = 25;
    }

    if (note_name == "pp")
    {
      dynamic = 40;
    }

    if (note_name == "p")
    {
      dynamic = 50;
    }

    if (note_name == "mp")
    {
      dynamic = 62;
    }

    if (note_name == "mf")
    {
      dynamic = 75;
    }

    if (note_name == "forte")
    {
      dynamic = 90;
    }

    if (note_name == "ff")
    {
      dynamic = 110;
    }

    if (note_name == "fff")
    {
      dynamic = 120;
    }

    if (note_name == "ffff")
    {
      dynamic = 127;
    }

    lazy::dynamic = dynamic % 128;
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1169 "textmidi.l"
{
    // A velocity value with a sign, + or -,
    // is a delta change in the current lazy::dynamic.
    // Otherwise it is an absolute setting for lazy dynamic.
    string velocity_str(yytext), directive;
    string intstr;
    istringstream iss(velocity_str);
    iss >> directive >> intstr;
    int64_t vel_number{boost::lexical_cast<int64_t>(intstr)};
    int64_t temp_dynamic{lazy::dynamic};
    switch (intstr[0])
    {
      case '+': // delta change
      case '-': // delta change
        temp_dynamic += vel_number;
        break;
      [[likely]] default:  // absolute setting
        temp_dynamic = vel_number;
        break;
    }
    lazy::dynamic = static_cast<uint32_t>(temp_dynamic) % 128;
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1192 "textmidi.l"
{
    /* Recognize chan {channel} */
    string channel_str(yytext),
           discard;
    uint32_t channel{1U}; // text channels are in [1..16]
    istringstream stringstream(channel_str);
    stringstream >> discard >> channel;
    shift_channel(channel);

    if ((running_status & channel_mask) != global_channel)
    {
        running_status = static_cast<std::uint8_t>(0);
    }
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1207 "textmidi.l"
{
    /* Recognize pitch name with optional ties */
    string note_name{};
    istringstream iss(yytext);
    iss >> note_name;
    KeyTie keytie{note_name};

    // write note event
    if (!keytie.tie_in_)
    {
      write_delay();
      check_running_status((global_channel & channel_mask) | note_on);
      trackchunk.push_back(keytie.key_);
      trackchunk.push_back(lazy::dynamic);
    }
    lazy::chord.push_back(keytie);    // save key number in lazy::chord;
  }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 1225 "textmidi.l"
{
    /* Recognize error grammar bad note letter */
    // ERROR
    cerr << text_filename << ':' << line_ctr <<
      " Non Key Letter before Key Name: " << __LINE__ << ' ' << yytext <<
      " in track " << track_counter << " at beat " <<
      (total_beats + (accum_delay / global_ticks_per_quarter)) << endl;
    exit(EXIT_SUCCESS);
  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1235 "textmidi.l"
{
    /* Recognize error grammar */
    // ERROR
    cerr << text_filename << ':' << line_ctr <<
      " Ties are not allowed in DETAIL mode: " << __LINE__ << ' ' << yytext <<
      " in track " << track_counter << " at beat " <<
      (total_beats + (accum_delay / global_ticks_per_quarter)) << endl;
    exit(EXIT_SUCCESS);
  }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 1245 "textmidi.l"
{
    /* Recognize error grammar */
    // ERROR
    cerr << text_filename << ':' << line_ctr <<
      " Non Note Letter before Note Name: " << __LINE__ << ' ' << yytext <<
      " in track " << track_counter << " at beat " <<
      (total_beats + (accum_delay / global_ticks_per_quarter)) << endl;
    exit(EXIT_SUCCESS);
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1255 "textmidi.l"
{
    /* Recognize error grammar */
    // ERROR
    cerr << text_filename << ':' << line_ctr <<
      " Key Name without octave: " << __LINE__ << ' ' << yytext <<
      " in track " << track_counter << " at beat " <<
      (total_beats + (accum_delay / global_ticks_per_quarter)) << endl;
  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1264 "textmidi.l"
{
    /* Recognize error grammar */
    // ERROR
    cerr << text_filename << ':' << line_ctr <<
      " Key Name without octave: " << __LINE__ << ' ' << yytext <<
      " in track " << track_counter << " at beat " <<
      (total_beats + (accum_delay / global_ticks_per_quarter)) << endl;
  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1273 "textmidi.l"
{
    /* Recognize a duration fraction in LAZY mode.  */
    const string rhythmstr{yytext};
    istringstream iss(rhythmstr);
    double num1{1.0},
           num2{1.0},
           thedivisor{1.0},
           thenumerator{1.0};
    uint32_t total_duration{},
             note_duration{};
    iss >> num1;

    // a quarter note is "4" or "1/4".  A double whole note must be "2/1".
    const size_t slashi{rhythmstr.find('/')};
    if (slashi != rhythmstr.npos)
    {
      // we have a ratio
      string num2str{rhythmstr, slashi + 1};
      istringstream num2stream{num2str};
      num2stream >> num2;
      thenumerator = num1;
      thedivisor   = num2;
    }
    else
    {
      // we have a single number, which we divide into 1.0
      thedivisor = num1;
      if (thedivisor > (global_ticks_per_quarter * QuartersPerWhole))
      {
        cerr << text_filename << ':' << line_ctr
             << " A duration denominator that is > ticks per whole! "
             << thedivisor << '>' << (global_ticks_per_quarter * QuartersPerWhole) << '\n';
      }
    }
    total_duration = delay_and_update_total_ticks(thenumerator, thedivisor,
            ('.' == rhythmstr[rhythmstr.size() - 1]),
            ('.' == rhythmstr[rhythmstr.size() - 2]));
    //
    // Subtract detache, to be added back in as a "rest".
    note_duration
        = total_duration - ((static_cast<double>(detache) < total_duration) ? detache : 0);
    // write note offs for each note in the chord with 0 delays
    accum_delay += note_duration;

    for (const auto& keytie : lazy::chord)
    {
      if (!keytie.tie_out_)
      {
        write_delay(); // wait the duration of the note

        uint32_t channel{global_channel & channel_mask};
        const uint8_t note_cmd{lazy::note_off_select ? note_off : note_on};
        const auto status_byte{channel | note_cmd};
        check_running_status(status_byte);

        trackchunk.push_back(keytie.key_ & byte7_mask);

        // If we are using a note_off, then use the prevailing dynamic; else 0.
        const uint8_t velocity{lazy::note_off_select
            ? static_cast<uint8_t>(lazy::dynamic) : note_off_velocity};
        trackchunk.push_back(velocity);
      }
    }
    remove_if(lazy::chord.begin(), lazy::chord.end(),
        [](const KeyTie& kt) { return !kt.tie_out_; });

    lazy::chord.clear();
    if (static_cast<double>(detache) < total_duration)
    {
        accum_delay += detache;
    }
    BEGIN(LAZY_STATE);
  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1347 "textmidi.l"
{
    /* Recognize a rest. */
    string rhythmstr{yytext},
           discard{};

    istringstream stringstream{rhythmstr};
    double num1{1.0},
           num2{1.0},
           thedivisor{1.0},
           thenumerator{1.0};
    uint32_t total_duration{240};
    stringstream >> discard >> num1;
    size_t slashi{rhythmstr.find('/')};
    if (slashi != rhythmstr.npos)
    {
      // we have a ratio
      string num2str{rhythmstr, slashi + 1};
      istringstream num2stream{num2str};
      num2stream >> num2;
      thenumerator = num1;
      thedivisor   = num2;
    }
    else
    {
      // we have a single number, which we divide into 1.0
      thedivisor = num1;
      if (thedivisor > (global_ticks_per_quarter * QuartersPerWhole))
      {
        cerr << text_filename << ':' << line_ctr
             << " A duration denominator that is > ticks per whole! "
             << thedivisor << '>' << (global_ticks_per_quarter * QuartersPerWhole) << '\n';
      }
    }
    total_duration = delay_and_update_total_ticks(thenumerator, thedivisor,
            ('.' == rhythmstr[rhythmstr.size() - 1]),
            ('.' == rhythmstr[rhythmstr.size() - 2]));
    accum_delay += total_duration;
  }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1386 "textmidi.l"
{
    /* Recognize comments. */
    ++line_ctr;
  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1390 "textmidi.l"

	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1391 "textmidi.l"

	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1392 "textmidi.l"
{
    ++line_ctr;
  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FILE_HEADER_STATE):
case YY_STATE_EOF(LAZY_STATE):
case YY_STATE_EOF(DETAIL_STATE):
case YY_STATE_EOF(TEXT_META_STATE):
case YY_STATE_EOF(QUOTE_STATE):
#line 1395 "textmidi.l"
{
    if (verbose)
    {
        clog << "Found " << track_counter
             << " tracks and will set MIDI header accordingly.\n";
    }
    midi_filestr.seekp(10);
    track_counter = htobe16(track_counter);
    midi_filestr.write(io_bytes(track_counter), sizeof(track_counter));
    yyterminate();
  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1406 "textmidi.l"

	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1408 "textmidi.l"
ECHO;
	YY_BREAK
#line 3021 "textmidi.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 712 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 712 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 711);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1408 "textmidi.l"



