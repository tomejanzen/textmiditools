\input texinfo @c -*-texinfo-*-
@comment %**start of header
@setfilename textmidicgm.info
@settitle textmidicgm
@documentencoding US-ASCII
@exampleindent asis
@comment %**end-of-header

@dircategory music
@direntry
* textmidicgm: (textmidicgm.info). Automatically generate music as a textmidi file.
@end direntry

@comment @documentlanguage en_US

@titlepage
@title Using @command{textmidicgm}
@subtitle The MIDI-to-textmidi translator
@author Thomas E. Janzen
@end titlepage
@copying
Copyright @copyright{} 2024 Thomas E. Janzen.
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the
license is included in the section entitled ``GNU Free Documentation License.''
@end quotation
@end copying
@insertcopying

@ifnottex
@node Top
@top textmidicgm


@end ifnottex
@contents

@menu
* Overview::
* Invoking textmidicgm::
* The Model of Musical Form::
* The Original Text Form File::
* The XML Form File::
* The textmidi File::
* The Gnuplot File::
* Installation::
* GNU Free Documentation License::
* Program and File Index::
* Bibliography::
* Concept Index::
@end menu
@node Overview
@chapter Overview
@cindex overview
The @command{textmidicgm} program generates works of music in textmidi
language,
which can be converted by @command{textmidi} into standard MIDI file formats.
Using @command{textmidicgm}, it is possible to generate pieces of music
in a text file using textmidi language, which can in turn be converted by
@command{textmidi} into a standard MIDI file .
The resulting text files can be edited in text editors, processed
with text tools, and enriched using a macro processor such as m4.
(The C preprocessor uses the pound sign (#), which is a sharp sign in
textmidi language.)

textmidicgm chooses pitches as MIDI key numbers from an even distribution
of
a random variable, and similarly for MIDI velocities and rhythmic
durations.
In addition, the current ranges of key, velocity and duration are
modulated as sinusoids of any period but typically 2 to 5 minutes,
which control, roughly, the mean and range for each, and the number of
voices playing.
A MIDI-key-based scale is specified in the input file formats, along with
a pulse, which can force a pseudo-metrical feel on the music.
If pulse is zero, then the rhythm will be more fluid or conversational.
It is also possible to force a random-walk melody rather than use
white-random key numbers.
The text file specification implements this original scheme.
The text file specification is deprecated and may lose support.

The XML file format implements this scheme with a few added features,
such as
parallel-tracking voices, setting the probabilities of a random walk
moving up,down or repeating the key number; amplitudes and offsets for the form
sinusoids.

Aside from a few simple added features,
the compositional engine of @command{textmidicgm} is described in
AlgoRhythms: Real-Time Algorithmic Composition for a Microcomputer,
by Thomas E. Janzen, pp. 109-210,
Readings in Computer-Generated Music, Denis Baggi, ed.
AlgoRhythms 1.0 and 2.0 were released as open-source software
on the Commodore Amiga
and distributed at least on "Fred Fish" disks starting in 1990.
AlgoRhythms 3.0 was probably not released; it combined MIDI and
Amiga Audio voices.

@command{textmidicgm} writes computer-generated music using evenly-distributed 
random numbers controlled 
by sinusoidal waveforms that (usually slowly) change the character of the music. @command{textmidicgm} 
does not make use of AI (Artificial Intelligence). It does not train on other pre-existing 
music or other material. The mathematics it references is limited to simple population 
statistics (although the mean is imprecisely used) and trigonometric functions, because 
that's all the math I knew in 1976, when I conceived this approach to form (and prior 
to my engineering education). The specific key (note) numbers, durations and velocities 
(loudnesses) are derived from flat, evenly-distributed random numbers, because that 
is what I explored in about 1980 on a Radio Shack TRS80. Any resemblance to previously-existing 
music is purely coincidental. @command{textmidicgm} writes multiple monophonic lines (one line 
per track) and does not model themes, motifs, melodies, harmony or harmonic movement (with the 
exception of allowing parallel follower voices), 
nor a grammar of note movement or harmonic movement.

@command{textmidicgm} always generates one voice per track,
in textmidi LAZY mode.

The textmidi language is described in the info page
for @command{textmidi}.

@menu
* What is textmidicgm?::
* History::
@end menu

@node What is textmidicgm?
@section What is textmidicgm?
@cindex textmidicgm
The program @command{textmidicgm} generates a work of music basically
using evenly-distributed ("white") random numbers to select of MIDI
keynumbers,
MIDI velocities, and durations.  The output file is a text file
in textmidi
language.

Unlike the original AlgoRhythms program, which had a real-time GUI
and permitted changes to a Form while playing,
@command{textmidicgm} is a "batch" program which reads and writes files,
but does not record or play over a MIDI interface.

The rationale for @command{textmidicgm} comprises several incentives:
@itemize
@cindex Use of statistical distributions
@item The use of simple statistical distributions as a source of musical
choices has not been fully exploited.
Iannis Xenakis's Akrata used a Gaussian density distribution,
and LeJaren Hiller started with random
notes before moving on to Markov chains, but further experimentation might
have been productive before proceeding to advanced and exotic techniques.
@command{textmidicgm} provides a tool for continued exploration of
evenly-distributed random notes etc.
@cindex Use of sinusoids
@item The use of sinusoids to modulate the ranges of key number,
loudness (dynamics), duration and number of voices explores an approach to
musical form as the modulation of the character of the musical texture.
This approach to musical form was used in Thomas E. Janzen's
hand-composed piano works
@cite{Animations} (1977) and @cite{Lucy's Dance} (1982).
It is perfectly fine to experimental with very short periods, say 0.1 seconds,
and very long ones, such as 1000000000.0 seconds (which produces a static
performance).
@cindex Musical Turing Test
@item Just as human auditors in a Turing Test can be forgiving of computer
and human entrants, those who listen
to the music from @command{textmidicgm} can sometimes embue the music with
 meaning that depends on their
imaginations and not on how the music was generated.
@cindex Musical style
@item @command{textmidicgm} is not, by itself, intended to imitate any
known style of music.  The
presumption is Bach wrote all the Bach music that is needed, and bad jazz
players in the 1950's
made all the bad jazz that is needed.
@command{textmidicgm} makes its own music.
@item @command{textmidicgm} is a medium.  When an artist uses a graphite
pencil, they do not expect to
produce a full-color image with painterly marks.
A musician using @command{textmidicgm} doesn't expect to produce
a movement in sonata form, or a Country song.
@cindex Exploiting MIDI
@item @command{textmidicgm} exploits the conveniences of the MIDI interface
definitions of key number,
velocity, and duration.  This off-loads @command{textmidicgm} from concerns
with DSP and instrument sound generation.
@end itemize

@node History
@section History
@cindex history
@command{textmidicgm} enlarges on the approach developed in 1989 as "AlgoRhythms"
for the Commodore Amiga (running AmigaDOS) and improved a couple years later.
The compositional engine was adapted in 2004 for linux and to produce
text-based textmidi files.
Improvements in 2020 and 2021 added minor features.

@command{textmdicgm} is a command-line batch program and not an interactive
graphical program as AlgoRhythms was.

@node Invoking textmidicgm
@chapter Invoking textmidicgm
@cindex Invoking textmidicgm
@menu
* Options::
* Invocation Examples::
@end menu

@node Options
@section Options
@cindex Options
@smallexample
textmidicgm @b{@minus{}f}|@b{@minus{}@minus{}form}
 @var{text_form_file_glob}...|
@b{@minus{}x}|@b{@minus{}@minus{}xmlform} @var{xml_form_file_glob}...
[@b{@minus{}u}|@b{@minus{}@minus{}update}]
[@b{@minus{}r}|@b{@minus{}@minus{}random}]
[@b{@minus{}a}|@b{@minus{}@minus{}answer}]
[@b{@minus{}i}|@b{@minus{}@minus{}instruments} @lbracechar{}piano | chromaticpercussion | organ | guitar | bass | strings | ensemble | brass
| reed | pipe | synthlead | synthpad | syntheffects | ethnic | percussive | soundeffects
| all | melodic | idiophone...@rbracechar{}]
[@b{@minus{}o}|@b{@minus{}@minus{}textmidi} @var{output textmidi file}] [@b{@minus{}g}|@b{@minus{}@minus{}gnuplot}]
[@b{@minus{}c}|@b{@minus{}@minus{}clampscale}]
[@b{@minus{}z}|@b{@minus{}@minus{}arrangements} @lbracechar{}rotateright | rotateleft | reverse 
| previouspermutation | nextpermutation | swappairs | shuffle | skip | heaps @rbracechar{}
[@b{@minus{}t}|@b{@minus{}@minus{}maxeventspertrack} @lbracechar{}integer@rbracechar{}
[@b{@minus{}y}|@b{@minus{}@minus{}arrangementsperiod} @lbracechar{}time in seconds@rbracechar{}
[@b{@minus{}w}|@b{@minus{}@minus{}dotted_rhythms} @var{true}|@var{false}
[@b{@minus{}e}|@b{@minus{}@minus{}rhythmexpression} @var{rational}|@var{simplecontinuedfraction}
[@b{@minus{}h}|@b{@minus{}@minus{}help}] [@b{@minus{}V}|@b{@minus{}@minus{}version}] [@b{@minus{}v}|@b{@minus{}@minus{}verbose}]
[@b{@minus{}k}|@b{@minus{}@minus{}stacktracks}]
@end smallexample

@table @option
@cindex @command{textmidicgm} command line options.
@item @minus{}f, @minus{}@minus{}form @var{text_form_file}
The input file: a text file in the format used in the original 1990 version, probably.
Use of this file format is deprecated.
@cindex form
@item @minus{}x, @minus{}@minus{}xmlform @var{xml_form_file_glob}...
@cindex xmlform
The input file: an XML file supporting more features.  If @minus{}@minus{}random is
specified, the form's output file.
This file name when used for input may be used to glob several files.
Globbing filenames uses wildcards such as an asterisk to mean either nothing or any of something;
A question mark is a placeholder for one mandatory character; character sets are groups with square brackets.
Globbing is supported by the C standard library and POSIX.2.
Each resolved filename is processed in turn; the name_ field is used to form an output file name.
If @minus{}@minus{}stacktracks is specified, then each resolved form file's results are appended to the output file
without FILEHEADER lines.  The FILEHEADER may show an incorrect number of total tracks, but that is allowed because
textmidi ignores the number of tracks given in the FILEHEADER line.
@item @minus{}r, @minus{}@minus{}update
@cindex update
Update a version 0 XML form file to version 2.  Has no effect on version 2 files.
for 
@smallexample
textmidicgm --xmlformfile symphony.xml --update
@end smallexample
produces an updated version of symphony.xml called update_symphony.xml that is in the current format of an XML form file.
@item @minus{}r, @minus{}@minus{}random
@cindex random xml_form_file_base
Make a random form, write it to the base filename given, adding @quotedblleft{}.xml@quotedblright{} and exit.
@itemize
@item The name is taken from the argument provided to the @minus{}@minus{}random argument.
@item The duration is 30 minutes.
@item min_note_len to [0.03125@dots{}0.03125 + random[0@dots{}1.0)]
@item max_note_len_ = min_note_len_ + random[0@dots{}1.0) * 2
@cindex random pulse
@item The pulse is random in (0.0@dots{}16.0).
@cindex random walk
@item The melody probabilities are set to rest 1/8 of the time on average;
the probabilities of walking down and repeating the same pitch are random;
the walking up probability is set to be equal to the down probability so
that the voice doesn't wander off to one end of its range.
@cindex random sinusoids
@item The form sines are all set with offsets and gains such that
that the sines vary in (0.0@dots{}1.0).
@cindex random sinusoids
@item The form sines period is random from 1 to 6 minutes and the phase
is random in the range @math{(-\pi@dots{}+\pi)}.
@cindex random scale
@item The scale is randomly selected from diatonic, minor, whole, diminished,
pentatonic (think Debussy), tritone (C, D, E, F, F#, G#, A#, B),
chromatic, on any chromatic step.  The scales themselve cover the full range of
MIDI key numbers.
@cindex random complement
@item The number of voices is random in (1@dots{}24).  MIDI channels (1@dots{}16)
are used sequentially save channel 10, which General MIDI assigns to
idiophones; if idiophones are selected with @minus{}@minus{}instruments idiophone
then channel 10 is used for an idiophone channel.
Idiophones are not used unless specified by use of option
@minus{}@minus{}instruments idiophone, along with other instrument groups
if desired.
@cindex random scale
@item Each voice is set to use
a random MIDI channel from (1@dots{}16), exclusive of 10.
If the idiophone program is selected then the channel
for a voice is set to 10.
@item A voice is randomly selected to walk or skip.
@cindex random instrument
@item The General MIDI program is selected
depending on the instruments selected with @minus{}@minus{}instruments.
The voices' ranges are limited
by the characteristic range of the instruments
selected, using http://en.wikipedia.org to look up the actual instruments.
@cindex random pan
@item The pan is set to spread the channels across
the audio field from left to right, starting from the center.
Idiophones on channel 10 are always centered.
We don't want other channels to be pushed over to one side.
There are one more stereo zones than the number of channels.
For example:
If there is one MIDI channel, there will be two zones,
one on the left and one on the right, and
the channel is centered:
@smallexample
(---------|---------)
L---------C---------R
          ^
@end smallexample
Two voices have 3 zones:
@smallexample
(------|------|-----)
L---------C---------R
       ^      ^
@end smallexample
3 voices have 4 zones:
@smallexample
(---|-----|-----|---)
L---------C---------R
    ^     ^     ^
@end smallexample

@cindex random follow
@item Set each voice's follower status:
@item Random follow flag and leader voice.
@item If the leader is a follower, then set the voice to lead.
If the leader voice is a leader, then set this voice
@itemize
@item Random interval type
@item random delay to something less than a whole note.
@item duration_factor of 1.
@item randomly set whether to invert the voice
@item randomly set whether to make the voice retrograde
@end itemize
@item Set high and low pitches to match plausible values for the General MIDI instruments
@item Clamp the scale to not exceed the instruments as a whole ensemble.
@item Set the arrangement definition to have
@itemize
@item a randomly selected permutation algorithm and
@item    a random period in [0.0..30].
@end itemize


@end itemize
After the random form file has been written it may be edited, then used
as an input to the @minus{}@minus{}xmlform option.
@cindex @minus{}@minus{}instruments
@item @minus{}i, @minus{}@minus{}instruments @lbracechar{}piano chromaticpercussion organ guitar bass strings ensemble brass reed pipe synthlead synthpad syntheffects ethnic percussive soundeffects all melodic idiophone...@rbracechar{}
Select the groups of General MIDI instruments (patches) to use.  The selections may be repeated to affect their probability of being selected.  For example,
@quotedblleft{}strings strings piano@quotedblright{} will create a complement in the form file that is twice as likely to have strings as pianos.
Note that idiophones appear on channel 10, as per the MIDI 1.1 spec, and the range of scale used will be limited to the range given in the MIDI spec for idiophones,
and will also be limited to the scale used. The default is all non-idiophones.
@cindex @minus{}o,@minus{}@minus{}textmidi
@item @minus{}o, @minus{}@minus{}textmidi textmidi_output_file
@cindex --textmidi
The output file, in textmidi text language.
@item @minus{}g, @minus{}@minus{}gnuplot
@cindex gnuplot
Output a file of gnuplot data.
@item @minus{}c, @minus{}@minus{}clampscale
Trims the scale to remove low notes below the lowest low pitch in the voices,
and to remove high notes above the highest high pitch in the voices.
The scale will still cover the union of ranges of all of the voices.
The purpose of this is to avoid an effect in which the pitch curve is, say, 
low, and the voice just bangs away at the voice's lowest note for a long time
without moving at all until such time as the pitch curve starts to edge up
above that low pitch for the voice.  Because it is not a per-voice adjustment
it is not a complete solution, but is coherent with the original technique.
This option does not assume an rising-ordered scale.
@item @minus{}z, @minus{}@minus{}arrangements rotateright | rotateleft | reverse | previouspermutation | nextpermutation | swappairs | shuffle | skip | heaps
Periodically reorder the voice priority for the purposes of applying the texture curve, which determines how large a portion of the complement (the ensemble) is playing.
Without this feature, when the texture curve was thin, and a solo instrument played, it would always be the same voice and instrument playing.
By re-ordering the voices now and then, a different voice can be the soloist at those times.
For example, if arrangementsperiod is set to the same duration as the texture period, then each time the texture permits only one track to play,
a different voice and instrument will play the solo.
This has no effect on which voice follows another; those remain as they were at the start.
The algorithms are based (with the exception of swappairs) on C++ standard library algorithms for containers.
For example, if a form has four voices and use apply @minus{}@minus{}arrangements rotateright and @minus{}@minus{}arrangementsperiod 15, then every 15 seconds
the voice orders will be
@smallexample
0 1 2 3
3 0 1 2
2 3 0 1
1 2 3 0
...
@end smallexample
In this example, the solo would be from voice 0 for 15 seconds, then from voice 
1 for 15 seconds, then from voice 2, then voice 1.  During a time when only 2 voices 
are playing, first voices 0 and 1 would play, then in the next 15 seconeds voice 3 
and 0 would play, and so on.  This might be different from what it did before 
April 2023 (I'm not sure), but is probably more intuitive than before.
@table @samp
@item identity 
@cindex identity
The identity arrangement never changes the voice priority.
If @samp{@minus{}@minus{}arrangementsperiod 15} the voice arrangements will just remain the same:
@smallexample
00:00 0 1 2 3 
00:15 0 1 2 3 
00:30 0 1 2 3 
@dots{}
@end smallexample
@item rotateright
@cindex rotateright
Rotate right pushes the voices down in priority and brings the last voice to the top.  The new top voice plays the solo when the texture curve is thin.
If @samp{@minus{}@minus{}arrangementsperiod 15} the voice arrangements will change every 15 seconds and be:
@smallexample
00:00 0 1 2 3 
00:15 3 0 1 2 
00:30 2 3 0 1 
00:45 1 2 3 0 
01:00 0 1 2 3 
01:15 3 0 1 2 
@end smallexample
@item rotateleft
@cindex rotateleft
Rotate left pulls the voices up in priority and pushes the top voice to the last position.
@smallexample
0 1 2 3 
1 2 3 0 
2 3 0 1 
3 0 1 2 
0 1 2 3 
1 2 3 0 
@end smallexample
@item reverse
@cindex reverse
Reverse the order of voices.  The last voice becomes first in priority, and vis versa.
Alternate periods produce the same priority order.
@smallexample
0 1 2 3 
3 2 1 0 
0 1 2 3 
@end smallexample
@item previouspermutation
@cindex previouspermutation
Find and apply the previous permutation of the voice in terms of the integer priority, where 0 is the highest and plays the solo when the texture curve is thinest.
These are lexicographically sorted descending permutations.
@smallexample
0 1 2 3 
3 2 1 0 
3 2 0 1 
3 1 2 0 
3 1 0 2 
3 0 2 1 
3 0 1 2 
2 3 1 0 
2 3 0 1 
2 1 3 0 
2 1 0 3 
2 0 3 1 
2 0 1 3 
1 3 2 0 
1 3 0 2 
1 2 3 0 
1 2 0 3 
1 0 3 2 
1 0 2 3 
0 3 2 1 
0 3 1 2 
0 2 3 1 
0 2 1 3 
0 1 3 2 
@end smallexample
@item nextpermutation
@cindex nextpermutation
Permute the voices in terms of the integer priority to the next permutation.
These are lexicographically sorted ascending permutations.
@smallexample
0 1 2 3 
0 1 3 2 
0 2 1 3 
0 2 3 1 
0 3 1 2 
0 3 2 1 
1 0 2 3 
1 0 3 2 
1 2 0 3 
1 2 3 0 
1 3 0 2 
1 3 2 0 
2 0 1 3 
2 0 3 1 
2 1 0 3 
2 1 3 0 
2 3 0 1 
2 3 1 0 
3 0 1 2 
3 0 2 1 
3 1 0 2 
3 1 2 0 
3 2 0 1 
3 2 1 0 
@end smallexample
@item swappairs
@cindex swappairs
Swap neighboring voices.  Every other swap gets the same priority order.
@smallexample
0 1 2 3 
1 0 3 2 
0 1 2 3 
@end smallexample
@item shuffle
@cindex shuffle
Randomly shuffle the voices each scramble period.  There's no guarantee of producing all permutations.
@smallexample
0 1 2 3 
3 0 1 2 
3 0 1 2 
3 0 2 1 
3 0 2 1 
0 2 1 3 
0 1 3 2 
2 1 0 3 
3 1 2 0 
3 0 2 1 
@end smallexample
@item skip
@cindex skip
Shifts the first, third, fifth, etc. voices to the right and the second, fourth, sixth, tracks to the left.
@smallexample
0 1 2 3 4 
1 0 3 2 4 
1 3 0 4 2 
3 1 4 0 2 
3 4 1 2 0 
4 3 2 1 0 
4 2 3 0 1 
2 4 0 3 1 
2 0 4 1 3 
0 2 1 4 3 
@end smallexample
For an even number of voices it's a little more nuanced.
@smallexample
0 1 2 3 
1 0 3 2 
2 3 0 1 
3 2 1 0 
0 1 2 3 
1 0 3 2 
2 3 0 1 
3 2 1 0 
0 1 2 3 
1 0 3 2 
@end smallexample

@item heaps
@cindex heaps
Applies Heap's Algorithm to scramble voices in such a way that only 2 voices swap in each successive permutation.
@smallexample
0 1 2 3 
1 0 2 3 
2 0 1 3 
0 2 1 3 
1 2 0 3 
2 1 0 3 
3 1 0 2 
1 3 0 2 
0 3 1 2 
3 0 1 2 
1 0 3 2 
0 1 3 2 
0 2 3 1 
2 0 3 1 
3 0 2 1 
0 3 2 1 
2 3 0 1 
3 2 0 1 
3 2 1 0 
2 3 1 0 
1 3 2 0 
3 1 2 0 
2 1 3 0 
1 2 3 0 
@end smallexample
@end table

@item @minus{}y, @minus{}@minus{}arrangementsperiod time_in_seconds
The time period in seconds at which to apply the track scramble algorithm.
The default is 1000 minutes.
@item @minus{}t, @minus{}@minus{}maxeventspertrack integer_events
@cindex @minus{}t
@cindex @minus{}@minus{}maxeventspertrack
Puts a limit on the number of MIDI events generated for a single track, in order to
avoid generating over-large files.  The default is 100,000 events.

@item @minus{}w, @minus{}@minus{}dotted_rhythms true|false
@cindex @minus{}w
@cindex @minus{}@minus{}dotted_rhythms
Used with @b{--lazy}, selects dotted rhythms or only rational numbers (including an integer with an implied @quotedblleft{}1/@quotedblright{}).
The default is to use dotted rhythms.  If true, any rhythm with a numerator that is a power of 2 minus 1 (n^2-1), e.g.: 3, 7, 15, 31, 63, will be
written as a dotted rhythm.

If @quotedblleft{}true@quotedblright{}, then @quotedblleft{}3/8@quotedblright{} will appear as @quotedblleft{}4.@quotedblright{}, 
else as @quotedblleft{}3/8@quotedblright{}.

@item @minus{}e, @minus{}@minus{}rhythmexpression rational|simplecontinuedfraction
@cindex @minus{}e
@cindex @minus{}@minus{}rhythmexpression
Used with @b{--lazy}, selects either a rational or simple continued fraction expression of rhythm.
The default is a rational-like musical rhythm.
Note that @command{textmidicgm} uses @minus{}e while both @command{miditext} and @command{smustextmidi} use @minus{}r.
See textmidi.pdf for details of the syntax of simple continued fractions.

@item @minus{}v, @minus{}@minus{}verbose
@cindex verbose
Write some informative messages to the screen.  Errors are printed
regardless.
@item @minus{}V, @minus{}@minus{}version
@cindex version
Print the version of @command{textmidicgm}.
@item @minus{}h, @minus{}@minus{}help
@cindex help
Print the options summary.
@smallexample

Usage: textmidicgm [OPTION]... [XMLFORMFILE]...
textmidicgm Version 1.0.86
Allowed options:
  -h [ --help ]                   help
  -v [ --verbose ]                write more trace information
  -k [ --stacktracks ]            process each form file and add its tracks to 
                                  the same output textmidi score
  -V [ --version ]                Write version information
  -f [ --form ] arg               input plain text Form files; double-quote 
                                  wildcards
  -x [ --xmlform ] arg            input XML text Form files; double-quote 
                                  wildcards
  -u [ --update ]                 update XML file with update_ prefix on the 
                                  name given to --xmlform
  -a [ --answer ]                 Ask before overwriting a file
  -o [ --textmidi ] arg           textmidi file
  -g [ --gnuplot ]                gnuplot data output file
  -r [ --random ] arg             write a random form to the name given and 
                                  exit
  -i [ --instruments ] arg        random instrument groups: piano 
                                  chromaticpercussion organ guitar bass strings
                                  ensemble brass reed pipe synthlead synthpad 
                                  syntheffects ethnic percussive soundeffects 
                                  all melodic idiophone
  -c [ --clampscale ]             In each form, clamp the scale to the union of
                                  the voice ranges
  -z [ --arrangements ] arg       rotateright rotateleft reverse 
                                  previouspermutation nextpermutation swappairs
                                  shuffle skip heaps identity
  -t [ --maxeventspertrack ] arg  Maximum number of events in a track before 
                                  stopping
  -y [ --arrangementsperiod ] arg seconds before changing voice priority
  -w [ --dotted_rhythms ] arg     true or false
  -e [ --rhythmexpression ] arg   rational or simplecontinuedfraction

Report bugs to: janzentome@atchar{}gmail.com
textmidicgm home page: https://github.com/tomejanzen/textmiditools
@end smallexample
@item @minus{}k|@minus{}@minus{}stacktracks
The @b{@minus{}@minus{}stacktracks} options cause all of the form file names resolved from the list and globbing to have their resulting
textmidi output to be added to one output file.   The output file name may be specified with the @b{@minus{}@minus{}textmidi} option,
otherwise it will be taken from the name field of the first form file.
@end table
Note that the XML file produced can be edited to reflect your interests; you will learn
what XML and boost serialization can accept for edits.

@node Invocation Examples
@section Invocation Examples
@cindex  Examples
The following command will read the XML form file graduallyitsmorning.xml and
generate the textmidi text file graduallyitsmorning.txt:

@smallexample
@command{textmidicgm} --xmlform @var{graduallyitsmorning.mid} --textmidi @var{graduallyitsmorning.txt}
@end smallexample

The following generates a randomized form file for generation in another step, and then
converted into a MIDI file:

@smallexample
@command{textmidicgm} --random --xmlform @var{newpiece.xml}
@command{textmidicgm} --xmlform @var{newpiece.xml} --textmidi @var{newpiece.txt}
@command{textmidi} --textmidi @var{newpiece.txt} --midi @var{newpiece.mid}
@end smallexample

The following example generates a data file that can be plotted as a statistical plot with
error bars:
@smallexample
@command{textmidicgm} --xmlform @var{newpiece.xml} --textmidi @var{newpiece.txt} --gnuplot
@end smallexample
The gnuplot data file will be named from the name inside the XML form file, with
@quotedblleft{}.plot@quotedblright{} appended.

@node The Model of Musical Form
@chapter The Model of Musical Form
@cindex Model of Musical Form

The @command{textmidicgm} program models musical form as a musical character
that is modulated by sinusoids.  This was explored in
a traditionally-composed work in 1976/1977, and again in 1982.
It was automated by the AlgoRhythms program distributed as open-source
software for the Commodore  Amiga , which was described in a paper
listed in the Bibliography.

Note that a hard limit of 100,000 note events has been added to avoid
filling a disk because selections produce notes of short length with
a static rhythm mean.

@command{textmidicgm} does not model musical melody, meter, harmony, or
traditional forms such as sonata form.

Musical character is described as the following intantaneous
statistical quantities:

@itemize
@item Pitch
@cindex pitch
@itemize
@item Mean:
The mean, or average, pitch (actually the mean MIDI key number);
@cindex mean
@itemize
@item period: in seconds
@cindex period
@item phase: in radians (sorry).
@cindex phase
Note that one full circle is two pi radians (about 6.28).
Ninety degrees is @math{\pi/2}, about 1.5707 radians, and so on.
Phase may be negative, so the full range could be represented
from about -3.14159 to +3.14159.
@end itemize
@item Range:
@cindex range
The range of key numbers from which one is selected.
A narrow range will select a narrow range around the
value of the mean.
@itemize
@item period: in seconds
@item phase: in radians
@end itemize
@end itemize

@item Dynamic
@cindex dynamic
@itemize
@item Mean:
The mean MIDI key velocity, or loudness.
@itemize
@item period: in seconds
@item phase: in radians
@end itemize
@item Range:
The range of velocity from which one is selected for the note event.
@itemize
@item period: in seconds
@item phase: in radians
@end itemize
@end itemize

@item Duration
@cindex duration
@cindex rhythm
@itemize
@item Mean:
The mean duration of individual notes from the overall range given
separately.
Note that the pulse setting in the form file specifies a minimum duration
that supersedes the minimum duration given in the form file.
A pulse of, for example, a fifth of a second or so tends to make the
music bounce a bit, as though it had a time signature,
although @command{textmidicgm}
does not specify a time signature or other way to group rhythmic values.
@itemize
@item period: in seconds
@item phase: in radians
@end itemize
@item Range:
The range of duration from which one is selected; this range is
a subset of the overall range, which is given separately.
@itemize
@item period: in seconds
@item phase: in radians
@end itemize
@end itemize

@item Texture (number of voices)
@cindex texture
@itemize
@item Range:
The number of voices playing polyphonically.
@itemize
@item period: in seconds
@item phase: in radians
@end itemize
@end itemize

@end itemize

These quantities can be modulated over time so that the character of the
music varies.  Edgard Vare'se explored using statistcal functions
to modulate
musical character.  @command{textmidicgm} uses sinusoids, typically
with periods of one to a few minutes.  Periods that are very long
relative to the length of the piece produce static pieces that in which
the musical character does not change, which has its own fascination.
Because the seven sinusoids can each have a unique phase and period,
the exact character of the music might not repeat at all for long pieces.

In addition to this approach to musical form, @command{textmidicgm}
specifies a musical work as having:
@itemize
@item name: the name of the piece;
@item len: a length in seconds for the entire piece;
@cindex len
@item min_note_len: the global mininum length of a note in seconds;
@item max_note_len: the global maximum length of a note in seconds;
@item scale: the full scale in MIDI key numbers;
@cindex scale 
@item pulse: which forces notes to start together on a number of
pulses per second;
@cindex pulse
@item melody_probabilities: the cumulative probabilities of a walking-mode melody 
taking a step up, down, or repeating the last key number;
@item pitch_form: as described above;
@item rhythm_form: as described above;
@item dynamic_form: as described above;
@item texture_form: as described above;
@cindex melody_probabilities;
@item a number of voices, each of which has the following attributes:
@cindex voices
@itemize
@item low_pitch: a pitch below which the voice is tacet;
@cindex low_pitch;
@item high_pitch: a pitch above which the voice is tacet;
@cindex high_pitch;
@item channel: the MIDI voice channel;
@item walking: the probability that a voice is in walking mode, randomized note to note.
A zero makes the voices always random key (or somewhat jumpy); a 1.0 makes the voice walk
in the scale.  A value between 0.0 and 1.0 is the probability that the voice will be
walking, note event to note event; if not walking, leap randomly.
@item program: in the XML form file, a MIDI program,
mapped by General MIDI to an instrument sound;
@cindex voice program;
@item pan: a left-right stereo pan value;
@cindex pan;
@item in the XML file each voice can be defined as a follower by:
@itemize
@item follow: 0 to be a unique melody; 1 to follow another voice
@item leader: the leader voice to follow (with voices numbered 0...).
The leader may be a higher-numbered voice.
@item interval_type: a scaler or chromatic interval;
@item interval: the interval, from -128 to + 128;
@item delay: a rational musical rhythm value to delay after the leader;
@item duration_factor: a rational value with which multiply all of the leader's durations (a conventional ratio: 4 is 4 whole notes; use 1/4 for one fourth);
@item inversion: 0 to not invert the melody; 1 to invert;
@item retrograde: 0 to copy the leader forwards; 1 to copy it in reverse time.
@end itemize
@end itemize
@end itemize

@node The Original Text Form File
@chapter The Original Text Form File
@cindex  The Original Text Form File
The original text form file was developed for the Amiga  version of this
music generator.  It may now be slightly different from that for the Amiga,
but probably it is identical to the form file for AlgoRhythms 2.0.
The original text form file is now deprecated in favor of the XML form file.

Individual notes have key numbers, velocities (dynamics), and durations
that
are selected using evenly-distributed
(@quotedblleft{}white@quotedblright{}).
At a given moment these values are selected from ranges of key number,
velocity,
and duration that are determined by sinusoidal curves defined
in the form file.
There are seven curves:
@itemize
@item Pitch
@cindex Pitch
@itemize
@item Mean Sinusoid:
@cindex Pitch Mean Sinusoid
The peak of the sinusoid selects high pitches (MIDI key numbers);
the low part selects low pitches.
@item Range Sinusoid:
@cindex Pitch Range Sinusoid
A narrow range will select a narrow range around the
value of the mean sinusoid.
@end itemize

@item Dynamic
@cindex Dynamic
@itemize
@item Mean Sinusoid:
@cindex Dynamic Mean Sinusoid
The peak of the sinusoid selects high (loud) velocities;
The low part selects softer dynamics.
@item Range Sinusoid
@cindex Dynamic Range Sinusoid
@end itemize

@item Duration
@cindex Duration
@itemize
@item Mean Sinusoid:
@cindex Duration Mean Sinusoid
The peak of the sinusoid selects long durations from the full duration
range specified in the form file.
The low part selects shorter durations.
Note that the pulse setting in the form file specifies a minimum duration
that supersedes the minimum duration given in the form file.
A pulse of, for example, a fifth of a second or so tends to make the
music bounce a bit, as though it had a time signature,
although @command{textmidicgm}
does not specify a time signature or other way to group rhythmic values.
@item Range Sinusoid
@cindex Duration Range Sinusoid
@end itemize

@item Texture (number of voices)
@cindex Texture
@itemize
@item Range Sinusoid
@cindex Range Sinusoid
The range sinusoid merely specifies how many voices will play, in the order
of the voice list.   At the peak of the texture sinusoid, all of the voices
will play.  At the low point, only one voice will play.
@end itemize

@end itemize

The range sinusoid is used to spread out the mean.
The mean sinusoid:

@example
   **    
 *    *  
*      * 
        *      *
         *    *
           **
@end example

The range sinusoid:
The lowest values of the range wave indicates a narrow range.

@example
 *******   
**********      **
***********    ***
******************
***********    ***
**********      **
 *******   
@end example


The range sinusoid, by halves, added to and subtracted
from the mean sinusoid:
@example
  ****     
 ******    
 *******   
*********        *
**********      **
***********    ***
************  ****
**    ******  ****
       * * **** *
@end example
Note that the range and mean sinusoids can have different periods and
different phases so that they do not align like the example above.
In addition, note that when the range goes beyond the actual limits
of key number or dynamic,
it is clipped, or truncated to the practical limit.
Because the range sinusoid, which varies
(0@dots{}1), is defined as covering the full range,
this happens any time that the
added range exceeds the peak of the mean sinusoid, or below its minimum.
Originally the form sinusoids had periods of about 1 to 4 minutes.
To make a static, unchanging, form, use very long periods,
such as millions of seconds.

@float Figure,fig:ex1
@image{animations1976,4in,4in,Animations original hand-drawn plot from 1976, }
@caption{Animations (1976, conventionally composed) drawn plot}
@end float

@float Figure,fig:ex2
@image{animations,4in,4in,Animations plot from textmidicgm.gnuplot, }
@caption{Animations (1977, conventionally composed) plot using textmidicgm.gnuplot.}
@end float

@smallexample
[seconds duration of entire musical piece]
[minimum individual note length in seconds]
[maximum nindividual ote length in seconds]
[number of scale tones]
[scale MIDI key numbers (Middle C = 60)]
...
[number of voices]
[pulses per second]
[pitch period of mean]
[pitch phase of mean]
[pitch period of range]
[pitch phase of range]
[duration period of mean]
[duration phase of mean]
[duration period of range]
[duration phase of range]
[velocity period of mean]
[velocity phase of mean]
[velocity period of range]
[velocity phase of range]
[texture period of range]
[texture phase of range]
[voice 0 low pitch] [high pitch] [channel 0-15] [walking flag]
...
@end smallexample

For example:
@smallexample
600.00
0.00
2.00
13
48
50
53
55
58
60
62
65
67
70
72
74
77
4
6
200.00
-1.57
200.00
-1.57
200.00
1.57
200.00
-1.57
200.00
-1.57
200.00
-1.57
200.00
-1.57
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  96  14  1
24  120  14  0
24  120  14  0
24  120  14  0
24  120  14  0
@end smallexample

@node The XML Form File
@chapter The XML Form File
@cindex  The XML Form File
The XML version of the form file is a boost serialization
XML archive format. (Cf. https://boost.org).
The format must be exactly as expected by boost serialization; for example,
comments may not be added.  On the other hand,
the floating point values need
not have all the trailing fractional zeroes
that are written by boost serialization.
Note that the <count> tag must have the correct length of the following
data, for example for the scale length.  If <count> is corrected afterward,
then you may add or delete members of a container.
The new format of XML Form file adds a number of items for specifying the
form to the original text format:
@itemize
@item Melody Probabilities
@cindex melody probabilities
When using a random walk, the probability of walking up or down, or repeating
the previous key number, or by implicaton, resting, can be specified. 
These probabilities are cumulative and act as thresholds.
@itemize
@item Up:
@b{up} is the probability of a walking voice
either being silent, walking down or repeating the last note; if the
random variable @geq{} @b{up}, then it walks up the scale;
@item Same:
@b{same} is the probability of a walking voice either
being silent or walking down.  If the random variable @geq{}
@b{same} and < @b{up},
then it repeats the last pitch.
@item Down:
@b{down} is the probability of a walking voice being
silent.  If the random variable @geq{}
@b{down} but <
@b{same}, then it walks down; otherwise it
rests.
@item Rest:
If the random variable <
@b{down}, the walking voice rests.
@end itemize
@*
@*
@math{down = probability(resting)}
@*
@math{same = probability(resting) + probability(walking down)}
@*
@math{up   = probability(resting) + probability(walking down) + probability(repeating the last pitch)}
@*
Because the probabilities are cumulative, the following hold:
@*
@math{1.0 @geq{} up}
@*
@math{up @geq{} same}
@*
@math{same @geq{} down}
@*
@math{down @geq{} 0.0}
@*
To prevent voices from walking off to one end of their ranges, keep
@*
@math{up == down}.


The original program, AlgoRhythms,
did not provide for voices randomly resting; voices only rested because the
current musical character's texture did not specify sufficient voices for
a voice to play; the first voice always played and had no rests.
@item sinusoid amplitude and offset
The sinusoids can have specified amplitudes for a narrower range of change,
and offsets that raise and lower the sinusoid.
These features have not been thoroughly tested.
Their defaults are both 0.5; this is how AlgoRhythms set them.
@item MIDI Program
@cindex voice program
Each voice has a program, which is a 1-based MIDI program.  Refer to
General MIDI for the instrument assignments to program numbers.
@item Fuzzy Walking:
In the XML file the walking value represents the probability that
a voice will be in walking mode from note event to note event.
It is a value from 0.0 to 1.0, inclusive.  This is compatible with
the boolean flag used before 2024, because the flag was stored as 0
or 1 in the XML file.  A value of 0.0 means non-walking, and 1.0 means
always walking.  A value of 0.5 means that the voice will have a 
50% chance of being in either walking or random mode.  Other values
between 0 and 1 may be used.
@item Voice Pan:
@cindex voice pan
The pan value for a voice can be specified for the entire piece of music.
A pan of -64 is all the way left, 63 is all the way right, and zero (0)
is centered.
@item Voice following:
@cindex voice following
A voice may be specified as a follower of another voice.
If <follow_> is 0, then the voice will be independent.
If <follow_> is 1, then the voice will follow the voice given in the
<leader> tag (voices count from zero (0)).
The interval_type tag determines whether the voice follows
in the scale (1) or chromatically (2).
The tag <interval_> specifies how many
scale steps or half-steps above (positive values)
or below (negative values)
the follower should be.
The follower voice can be set as the inversion of
the leader voice.  The selection of scalar or chromatic following
is obverved for the inversion.

The follower voice can be set as the retrograde (time-reversal) of
the leader voice. 
The pitch_follower field is always a 1; all followers follow
the pitch of the leader.
If there is a following circle, the voices in the circle will not have
any notes.  A following circle is created by any of the following:
@itemize
@item A voice follows itself.
@item A voice follows another voice, which in turn follows the first voice.
@item A chain of follows ultimately follow a member in the chain.
@end itemize
Finally, the following voice's rhythms may be multipled (before inserting a delay)
by a rational number.  This value is rational but not in @command{textmidi} format:
4 means 4 and 1/4 means a quarter.  If the duration factor is 1/4, then the
follower will be four times faster than the lead voice, such that it finishes
while only 1/4 of the lead voice's line has played.
@end itemize
The current version's format is:
@example
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="18">
<xml_form class_id="0" tracking_level="0" version="3">
	<name_>random</name_>
	<copyright_>© 2024 Ludwig van Beethoven</copyright_>
	<len_>1.80000000000000000e+03</len_>
	<min_note_len_>0.00000000000000000e+00</min_note_len_>
	<max_note_len_>2.00000000000000000e+00</max_note_len_>
	<scale_ class_id="1" tracking_level="0" version="0">
		<count>57</count>
		<item_version>0</item_version>
		<item>C0</item>
		<item>Db0</item>
		<item>E0</item>
		<item>F0</item>
		<item>G0</item>
		<item>Ab0</item>
		<item>Bb0</item>
		<item>C1</item>
		<item>Db1</item>
		<item>E1</item>
		<item>F1</item>
		<item>G1</item>
		<item>Ab1</item>
		<item>Bb1</item>
		<item>C2</item>
		<item>Db2</item>
		<item>E2</item>
		<item>F2</item>
		<item>G2</item>
		<item>Ab2</item>
		<item>Bb2</item>
		<item>C3</item>
		<item>Db3</item>
		<item>E3</item>
		<item>F3</item>
		<item>G3</item>
		<item>Ab3</item>
		<item>Bb3</item>
		<item>C4</item>
		<item>Db4</item>
		<item>E4</item>
		<item>F4</item>
		<item>G4</item>
		<item>Ab4</item>
		<item>Bb4</item>
		<item>C5</item>
		<item>Db5</item>
		<item>E5</item>
		<item>F5</item>
		<item>G5</item>
		<item>Ab5</item>
		<item>Bb5</item>
		<item>C6</item>
		<item>Db6</item>
		<item>E6</item>
		<item>F6</item>
		<item>G6</item>
		<item>Ab6</item>
		<item>Bb6</item>
		<item>C7</item>
		<item>Db7</item>
		<item>E7</item>
		<item>F7</item>
		<item>G7</item>
		<item>Ab7</item>
		<item>Bb7</item>
		<item>C8</item>
	</scale_>
	<pulse_>1.11191005625678478e+01</pulse_>
	<melody_probabilities_ class_id="2" tracking_level="0" version="0">
		<down_>1.25000000000000000e-01</down_>
		<same_>4.12009462496464418e-01</same_>
		<up_>7.12990537503535582e-01</up_>
	</melody_probabilities_>
	<pitch_form_ class_id="3" tracking_level="0" version="0">
		<mean_sine_ class_id="4" tracking_level="0" version="0">
			<period_>1.02425584134316992e+02</period_>
			<phase_>-1.82253453478075400e+00</phase_>
			<amplitude_>5.00000000000000000e-01</amplitude_>
			<offset_>5.00000000000000000e-01</offset_>
		</mean_sine_>
		<range_sine_>
			<period_>6.21093741597446325e+01</period_>
			<phase_>-7.21610833281546404e-01</phase_>
			<amplitude_>5.00000000000000000e-01</amplitude_>
			<offset_>5.00000000000000000e-01</offset_>
		</range_sine_>
	</pitch_form_>
	<rhythm_form_>
		<mean_sine_>
			<period_>2.46548001388247883e+02</period_>
			<phase_>2.04461102007382189e+00</phase_>
			<amplitude_>5.00000000000000000e-01</amplitude_>
			<offset_>5.00000000000000000e-01</offset_>
		</mean_sine_>
		<range_sine_>
			<period_>1.57452388934053829e+02</period_>
			<phase_>-2.50927379969043862e+00</phase_>
			<amplitude_>5.00000000000000000e-01</amplitude_>
			<offset_>5.00000000000000000e-01</offset_>
		</range_sine_>
	</rhythm_form_>
	<dynamic_form_>
		<mean_sine_>
			<period_>2.98937996187264332e+02</period_>
			<phase_>-1.86851759827392172e+00</phase_>
			<amplitude_>5.00000000000000000e-01</amplitude_>
			<offset_>5.00000000000000000e-01</offset_>
		</mean_sine_>
		<range_sine_>
			<period_>1.32768648088267241e+02</period_>
			<phase_>1.11850231647852882e+00</phase_>
			<amplitude_>5.00000000000000000e-01</amplitude_>
			<offset_>5.00000000000000000e-01</offset_>
		</range_sine_>
	</dynamic_form_>
	<texture_form_>
		<period_>2.49044070569047960e+02</period_>
		<phase_>-3.04239702993273964e+00</phase_>
		<amplitude_>5.00000000000000000e-01</amplitude_>
		<offset_>5.00000000000000000e-01</offset_>
	</texture_form_>
	<voices_ class_id="5" tracking_level="0" version="0">
		<count>9</count>
		<item_version>0</item_version>
		<item class_id="6" tracking_level="0" version="0">
			<low_pitch_>C0</low_pitch_>
			<high_pitch_>C8</high_pitch_>
			<channel_>13</channel_>
			<walking_>6.17341310053484582e-01</walking_>
			<program_>81</program_>
			<pan_>20</pan_>
			<follower_ class_id="7" tracking_level="0" version="3">
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_ class_id="8" tracking_level="0" version="0">
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>E1</low_pitch_>
			<high_pitch_>G4</high_pitch_>
			<channel_>16</channel_>
			<walking_>2.80945818972443251e-01</walking_>
			<program_>44</program_>
			<pan_>41</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>E1</low_pitch_>
			<high_pitch_>D6</high_pitch_>
			<channel_>2</channel_>
			<walking_>1.78122971305915118e-01</walking_>
			<program_>22</program_>
			<pan_>-43</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>F1</low_pitch_>
			<high_pitch_>F6</high_pitch_>
			<channel_>5</channel_>
			<walking_>6.67719786543500615e-01</walking_>
			<program_>8</program_>
			<pan_>-22</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>F1</low_pitch_>
			<high_pitch_>F6</high_pitch_>
			<channel_>12</channel_>
			<walking_>9.16052290796560253e-01</walking_>
			<program_>8</program_>
			<pan_>-1</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>E1</low_pitch_>
			<high_pitch_>G4</high_pitch_>
			<channel_>16</channel_>
			<walking_>9.02619110837619476e-01</walking_>
			<program_>44</program_>
			<pan_>41</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>F1</low_pitch_>
			<high_pitch_>F6</high_pitch_>
			<channel_>12</channel_>
			<walking_>8.68743255236859302e-02</walking_>
			<program_>8</program_>
			<pan_>-1</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>C0</low_pitch_>
			<high_pitch_>C8</high_pitch_>
			<channel_>13</channel_>
			<walking_>8.12108137049251222e-01</walking_>
			<program_>81</program_>
			<pan_>20</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
		<item>
			<low_pitch_>F1</low_pitch_>
			<high_pitch_>F6</high_pitch_>
			<channel_>12</channel_>
			<walking_>2.39896215303452925e-01</walking_>
			<program_>8</program_>
			<pan_>-1</pan_>
			<follower_>
				<follow_>0</follow_>
				<leader_>2147483647</leader_>
				<interval_type_>0</interval_type_>
				<interval_>0</interval_>
				<delay_>
					<numerator_>0</numerator_>
					<denominator_>1</denominator_>
				</delay_>
				<duration_factor_>
					<numerator_>1</numerator_>
					<denominator_>1</denominator_>
				</duration_factor_>
				<inversion_>0</inversion_>
				<retrograde_>0</retrograde_>
			</follower_>
		</item>
	</voices_>
	<arrangement_definition_ class_id="9" tracking_level="0" version="0">
		<algorithm_>1</algorithm_>
		<period_>1.00000000000000000e+05</period_>
	</arrangement_definition_>
</xml_form>
</boost_serialization>

@end example
Notes on XML tag versions:
@itemize
@item xml_form version 0: no copyright tag, no arrangement lock, and no follower for each voice tag.
@item xml_form version 2 : adds an arrangement block at the bottom.
@item xml_form version 2, follower_ version 2 : options for delay/inversion/retrograde.
@item xml_form version 3, follower_ version 2 : adds copyright_ tag.
@end itemize

@node The textmidi File
@chapter The textmidi File
@cindex  The textmidi File

The output of @command{textmidicgm} is a textmidi text file with tracks in LAZY mode.
It can be converted into a standard MIDI file by using
the @command{textmidi} program.
While a text file, the textmidi output can be edited
in text editors and processed by other text tools.
For example, assignments of MIDI channels and instrument
programs can be changed.

@node The Gnuplot File
@chapter The Gnuplot File
@cindex  The Gnuplot File
The @minus{}@minus{}gnuplot option will cause a gnuplot data file to be written with the
name in the xml form file with @quotedblleft{}.plot@quotedblright{} appended.
A gnuplot file that can read the file is shown below.
@smallexample
#
# RUN WITH by specifying the data file output by textmidicgm:
# /usr/bin/gnuplot -e "thefile='tjcgm.txt'" textmidicgm.gnuplot > name.jpg
#
# AlgoRhythms 3.0 colors
#wavecolor = "green"
#textcolor = "white"
#backgroundcolor = "0x9932CC"
## AlgoRhythms 1.0 colors
wavecolor = "0xAAAAEE"
textcolor = "black"
backgroundcolor = "0xCCCCCC"
set title "textmidicgm" textcolor rgb textcolor
set terminal jpeg background rgb backgroundcolor size 1024,1024
set grid xtics linetype rgb textcolor
set grid ytics linetype rgb textcolor
set border  linetype rgb textcolor
set xtics textcolor rgb textcolor
set ytics textcolor rgb textcolor
set size 1.0,0.5
set multiplot layout 4,1
set size 1.0,0.25
set autoscale y
set title "Pitch Index" textcolor rgb textcolor
plot [] [] thefile every 1 index "pitch" with yerrorbars linecolor rgb wavecolor
set autoscale y
set title "Duration" textcolor rgb textcolor
plot [] [] thefile every 1 index "rhythm" with yerrorbars linecolor rgb wavecolor
set autoscale y
set title "Velocity" textcolor rgb textcolor
plot [] [] thefile every 1 index "dynamic" with yerrorbars linecolor rgb wavecolor
set autoscale y
set title "Complement" textcolor rgb textcolor
plot [] [] thefile every 1 index "texture" with yerrorbars linecolor rgb wavecolor

unset multiplot
@end smallexample

@node Installation
@chapter Installation
@cindex Installation
This program was prepared for builds using GNU autoconf tools.
Unpack the archive.  Move to the directory created for the program.
Run the configure script and run make.
@example
./configure
make
@end example
Make yourself superuser (root), or use sudo to run install targets:
@example
make install
make install-info
@end example

@node GNU Free Documentation License
@chapter GNU Free Documentation License
Version 1.3, 3 November 2008
Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
https://fsf.org/
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@section PREAMBLE
The purpose of this License is to make a manual, textbook, or other functional and
useful document free in the sense of freedom: to assure everyone the effective freedom
to copy and redistribute it, with or without modifying it, either commercially or non-
commercially. Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible for modifications
made by others.
This License is a kind of “copyleft”, which means that derivative works of the document
must themselves be free in the same sense. It complements the GNU General Public
License, which is a copyleft license designed for free software.
We have designed this License in order to use it for manuals for free software, because
free software needs free documentation: a free program should come with manuals
providing the same freedoms that the software does. But this License is not limited to
software manuals; it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book. We recommend this License principally for
works whose purpose is instruction or reference.
@section APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work, in any medium, that contains a
notice placed by the copyright holder saying it can be distributed under the terms
of this License. Such a notice grants a world-wide, royalty-free license, unlimited in
duration, to use that work under the conditions stated herein.
The “Document”,
below, refers to any such manual or work. Any member of the public is a licensee, and
is addressed as “you”. You accept the license if you copy, modify or distribute the work
in a way requiring permission under copyright law.
A “Modified Version” of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modifications and/or translated into
another language.
A “Secondary Section” is a named appendix or a front-matter section of the Document
that deals exclusively with the relationship of the publishers or authors of the Document
to the Document’s overall subject (or to related matters) and contains nothing that
could fall directly within that overall subject. (Thus, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any mathematics.) The
relationship could be a matter of historical connection with the subject or with related
matters, or of legal, commercial, philosophical, ethical or political position regarding
them.
The “Invariant Sections” are certain Secondary Sections whose titles are designated, as
being those of Invariant Sections, in the notice that says that the Document is released
under this License. If a section does not fit the above definition of Secondary then it is
not allowed to be designated as Invariant. The Document may contain zero Invariant
Sections. If the Document does not identify any Invariant Sections then there are none.
The “Cover Texts” are certain short passages of text that are listed, as Front-Cover
Texts or Back-Cover Texts, in the notice that says that the Document is released under
this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may
be at most 25 words.
A “Transparent” copy of the Document means a machine-readable copy, represented
in a format whose specification is available to the general public, that is suitable for
revising the document straightforwardly with generic text editors or (for images com-
posed of pixels) generic paint programs or (for drawings) some widely available drawing
editor, and that is suitable for input to text formatters or for automatic translation to
a variety of formats suitable for input to text formatters. A copy made in an otherwise
Transparent file format whose markup, or absence of markup, has been arranged to
thwart or discourage subsequent modification by readers is not Transparent. An image
format is not Transparent if used for any substantial amount of text. A copy that is
not “Transparent” is called “Opaque”.
Examples of suitable formats for Transparent copies include plain ASCII without
markup, Texinfo input format, LaTEX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modification. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited
only by proprietary word processors, SGML or XML for which the DTD and/or pro-
cessing tools are not generally available, and the machine-generated HTML, PostScript
or PDF produced by some word processors for output purposes only.
The “Title Page” means, for a printed book, the title page itself, plus such following
pages as are needed to hold, legibly, the material this License requires to appear in the
title page. For works in formats which do not have any title page as such, “Title Page”
means the text near the most prominent appearance of the work’s title, preceding the
beginning of the body of the text.
The “publisher” means any person or entity that distributes copies of the Document
to the public.
A section “Entitled XYZ” means a named subunit of the Document whose title either
is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in
another language. (Here XYZ stands for a specific section name mentioned below, such
as “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve
the Title” of such a section when you modify the Document means that it remains a
section “Entitled XYZ” according to this definition.
The Document may include Warranty Disclaimers next to the notice which states that
this License applies to the Document. These Warranty Disclaimers are considered to
be included by reference in this License, but only as regards disclaiming warranties:
any other implication that these Warranty Disclaimers may have is void and has no
effect on the meaning of this License.
@section VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or
noncommercially, provided that this License, the copyright notices, and the license
notice saying this License applies to the Document are reproduced in all copies, and
that you add no other conditions whatsoever to those of this License. You may not use
technical measures to obstruct or control the reading or further copying of the copies
you make or distribute. However, you may accept compensation in exchange for copies.
If you distribute a large enough number of copies you must also follow the conditions
in section 3.
You may also lend copies, under the same conditions stated above, and you may publicly
display copies.
@section COPYING IN QUANTITY
If you publish printed copies (or copies in media that commonly have printed covers) of
the Document, numbering more than 100, and the Document’s license notice requires
Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all
these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover. Both covers must also clearly and legibly identify you as the publisher
of these copies. The front cover must present the full title with all words of the title
equally prominent and visible. You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve the title of the
Document and satisfy these conditions, can be treated as verbatim copying in other
respects.
If the required texts for either cover are too voluminous to fit legibly, you should put
the first ones listed (as many as fit reasonably) on the actual cover, and continue the
rest onto adjacent pages.
If you publish or distribute Opaque copies of the Document numbering more than 100,
you must either include a machine-readable Transparent copy along with each Opaque
copy, or state in or with each Opaque copy a computer-network location from which
the general network-using public has access to download using public-standard network
protocols a complete Transparent copy of the Document, free of added material. If
you use the latter option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this Transparent copy will
remain thus accessible at the stated location until at least one year after the last time
you distribute an Opaque copy (directly or through your agents or retailers) of that
edition to the public.
It is requested, but not required, that you contact the authors of the Document well
before redistributing any large number of copies, to give them a chance to provide you
with an updated version of the Document.
@section MODIFICATIONS
You may copy and distribute a Modified Version of the Document under the conditions
of sections 2 and 3 above, provided that you release the Modified Version under precisely
this License, with the Modified Version filling the role of the Document, thus licensing
distribution and modification of the Modified Version to whoever possesses a copy of
it. In addition, you must do these things in the Modified Version:
A. Use in the Title Page (and on the covers, if any) a title distinct from that of the
Document, and from those of previous versions (which should, if there were any,
be listed in the History section of the Document). You may use the same title as
a previous version if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities responsible for
authorship of the modifications in the Modified Version, together with at least five
of the principal authors of the Document (all of its principal authors, if it has fewer
than five), unless they release you from this requirement.
C. State on the Title page the name of the publisher of the Modified Version, as the
publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications adjacent to the other
copyright notices.
F. Include, immediately after the copyright notices, a license notice giving the public
permission to use the Modified Version under the terms of this License, in the form
shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections and required Cover
Texts given in the Document’s license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled “History”, Preserve its Title, and add to it an item
stating at least the title, year, new authors, and publisher of the Modified Version
as given on the Title Page. If there is no section Entitled “History” in the Docu-
ment, create one stating the title, year, authors, and publisher of the Document
as given on its Title Page, then add an item describing the Modified Version as
stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for public access to
a Transparent copy of the Document, and likewise the network locations given in
the Document for previous versions it was based on. These may be placed in the
“History” section. You may omit a network location for a work that was published
at least four years before the Document itself, or if the original publisher of the
version it refers to gives permission.
K. For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title
of the section, and preserve in the section all the substance and tone of each of the
contributor acknowledgements and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document, unaltered in their text and
in their titles. Section numbers or the equivalent are not considered part of the
section titles.
M. Delete any section Entitled “Endorsements”. Such a section may not be included
in the Modified Version.
N. Do not retitle any existing section to be Entitled “Endorsements” or to conflict in
title with any Invariant Section.
O. Preserve any Warranty Disclaimers.
If the Modified Version includes new front-matter sections or appendices that qualify
as Secondary Sections and contain no material copied from the Document, you may at
your option designate some or all of these sections as invariant. To do this, add their
titles to the list of Invariant Sections in the Modified Version’s license notice. These
titles must be distinct from any other section titles.
You may add a section Entitled “Endorsements”, provided it contains nothing but
endorsements of your Modified Version by various parties—for example, statements of
peer review or that the text has been approved by an organization as the authoritative
definition of a standard.
You may add a passage of up to five words as a Front-Cover Text, and a passage of up
to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified
Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be
added by (or through arrangements made by) any one entity. If the Document already
includes a cover text for the same cover, previously added by you or by arrangement
made by the same entity you are acting on behalf of, you may not add another; but
you may replace the old one, on explicit permission from the previous publisher that
added the old one.
The author(s) and publisher(s) of the Document do not by this License give permission
to use their names for publicity for or to assert or imply endorsement of any Modified
Version.
@section COMBINING DOCUMENTS
You may combine the Document with other documents released under this License,
under the terms defined in section 4 above for modified versions, provided that you
include in the combination all of the Invariant Sections of all of the original documents,
unmodified, and list them all as Invariant Sections of your combined work in its license
notice, and that you preserve all their Warranty Disclaimers.
The combined work need only contain one copy of this License, and multiple identical
Invariant Sections may be replaced with a single copy. If there are multiple Invariant
Sections with the same name but different contents, make the title of each such section
unique by adding at the end of it, in parentheses, the name of the original author or
publisher of that section if known, or else a unique number. Make the same adjustment
to the section titles in the list of Invariant Sections in the license notice of the combined
work.
In the combination, you must combine any sections Entitled “History” in the vari-
ous original documents, forming one section Entitled “History”; likewise combine any
sections Entitled “Acknowledgements”, and any sections Entitled “Dedications”. You
must delete all sections Entitled “Endorsements.”
@section COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents released
under this License, and replace the individual copies of this License in the various
documents with a single copy that is included in the collection, provided that you
follow the rules of this License for verbatim copying of each of the documents in all
other respects.
You may extract a single document from such a collection, and distribute it individu-
ally under this License, provided you insert a copy of this License into the extracted
document, and follow this License in all other respects regarding verbatim copying of
that document.
@section AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and independent
documents or works, in or on a volume of a storage or distribution medium, is called
an “aggregate” if the copyright resulting from the compilation is not used to limit the
legal rights of the compilation’s users beyond what the individual works permit. When
the Document is included in an aggregate, this License does not apply to the other
works in the aggregate which are not themselves derivative works of the Document.
If the Cover Text requirement of section 3 is applicable to these copies of the Document,
then if the Document is less than one half of the entire aggregate, the Document’s Cover
Texts may be placed on covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form. Otherwise they
must appear on printed covers that bracket the whole aggregate.
@section TRANSLATION
Translation is considered a kind of modification, so you may distribute translations
of the Document under the terms of section 4.
Replacing Invariant Sections with
translations requires special permission from their copyright holders, but you may
include translations of some or all Invariant Sections in addition to the original versions
of these Invariant Sections. You may include a translation of this License, and all the
license notices in the Document, and any Warranty Disclaimers, provided that you
also include the original English version of this License and the original versions of
those notices and disclaimers. In case of a disagreement between the translation and
the original version of this License or a notice or disclaimer, the original version will
prevail.
If a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “His-
tory”, the requirement (section 4) to Preserve its Title (section 1) will typically require
changing the actual title.
@section TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as expressly
provided under this License. Any attempt otherwise to copy, modify, sublicense, or
distribute it is void, and will automatically terminate your rights under this License.
However, if you cease all violation of this License, then your license from a particular
copyright holder is reinstated (a) provisionally, unless and until the copyright holder
explicitly and finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means prior to 60 days
after the cessation.
Moreover, your license from a particular copyright holder is reinstated permanently if
the copyright holder notifies you of the violation by some reasonable means, this is the
first time you have received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after your receipt of the
notice.
Termination of your rights under this section does not terminate the licenses of parties
who have received copies or rights from you under this License. If your rights have
been terminated and not permanently reinstated, receipt of a copy of some or all of the
same material does not give you any rights to use it.
@section FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free
Documentation License from time to time. Such new versions will be similar in spirit
to the present version, but may differ in detail to address new problems or concerns.
See https://www.gnu.org/copyleft/.
Each version of the License is given a distinguishing version number. If the Document
specifies that a particular numbered version of this License “or any later version”
applies to it, you have the option of following the terms and conditions either of that
specified version or of any later version that has been published (not as a draft) by
the Free Software Foundation. If the Document does not specify a version number of
this License, you may choose any version ever published (not as a draft) by the Free
Software Foundation. If the Document specifies that a proxy can decide which future
versions of this License can be used, that proxy’s public statement of acceptance of a
version permanently authorizes you to choose that version for the Document.
@section RELICENSING
“Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World Wide
Web server that publishes copyrightable works and also provides prominent facilities
for anybody to edit those works. A public wiki that anybody can edit is an example of
such a server. A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
site means any set of copyrightable works thus published on the MMC site.
“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license pub-
lished by Creative Commons Corporation, a not-for-profit corporation with a principal
place of business in San Francisco, California, as well as future copyleft versions of that
license published by that same organization.
“Incorporate” means to publish or republish a Document, in whole or in part, as part
of another Document.
An MMC is “eligible for relicensing” if it is licensed under this License, and if all works
that were first published under this License somewhere other than this MMC, and
subsequently incorporated in whole or in part into the MMC, (1) had no cover texts
or invariant sections, and (2) were thus incorporated prior to November 1, 2008.
The operator of an MMC Site may republish an MMC contained in the site under
CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is
eligible for relicensing.
@section How to use this License for your documents
To use this License in a document you have written, include a copy of the License in the
document and put the following copyright and license notices just after the title page:
Copyright (C)
year
your name.
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the
“with. . . Texts.” line with this:
with the Invariant Sections being list their titles, with
the Front-Cover Texts being list, and with the Back-Cover Texts
being list.
If you have Invariant Sections without Cover Texts, or some other combination of the
three, merge those two alternatives to suit the situation.
If your document contains nontrivial examples of program code, we recommend releasing
these examples in parallel under your choice of free software license, such as the GNU
General Public License, to permit their use in free software.

@node Program and File Index
@chapter Program and File Index


@node Bibliography
@chapter Bibliography
@cindex Bibliography

@itemize
@item @cite{The Complete MIDI 1.0 Detailed Specification.}
Document version 96.1.
Second edition.
1995.
Los Angeles.
The MIDI Manufacturers Association.

@item @quotedblleft{}AlgoRhythms: Real-Time Algorithmic Composition for a Microcomputer.@quotedblright{}
(1992)
Thomas E. Janzen.
@cite{Readings in Computer-Generated Music.}  Denis Baggi, ed.
p. 199. 11pp.
IEEE Computer Society Press.
Los Alamitos, CA.

@item @cite{AlgoRhythms Version 1.0.}
1990.
Thomas E. Janzen.
Fish disk 356.
Fred Fish.
Mentioned in @cite{Amazing Computing/Amiga} Sep. 1990 p. 95.

@item @cite{AlgoRhythms Version 2.0.}
1992.
Thomas E. Janzen.
Fish disk 606.
Fred Fish.

@item @cite{AlgoRhythms Version 3.1}
1996.
Thomas E. Janzen.
@cite{AMINET 12.} (DVD).
Schatztruhe.  Stefan Ossowskis Schatztruhe.
Gesellschaft fur Software mbH.
eronikastr. 33
D-45131 Essen Germany.
GTI GmbH.
Zimmersmuhlenweg 73
D-61440 Oberursel Germany.

@item @cite{SMUS.H; Definitions for Simple MUSical score.}
Jerry Morrison, Steve Hayes.
1986.
Amiga header file for C and C++.
Commodore.

@item @cite{Experimental music; composition with an electronic computer.}
Hiller, Lejaren A., Jr.  Isaacson, Leonard M.
1959.
New York.
McGraw-Hill.

@item @cite{Formalized Music.  Thought and Mathematics in Composition.}
Xenakis, Iannis.
1971.
Bloomington.
Indiana University Press.

@item @cite{The March Meeting.}
Bits and Bytes.  April 1991.
WCAUG: Worcester County Amiga Users group.
A review of Thomas Janzen's presentation of AlgoRhythms for the Amiga Computer.

@item @cite{Be Bach in a Moment.  Music Making for the Non-Musician.}
Michael Hanish.
AMIGA World.
April, 1992.
IDG Communications.

@item @cite{Boost serialization documentation.}
Robert Ramey.
2004.
https://www.boost.org/doc/libs/
1_74_0/libs/serialization/doc/index.html.
@end itemize

@node Concept Index
@chapter Concept Index
@printindex cp

@bye
